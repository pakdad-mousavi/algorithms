import{l as T,c as o,o as n,F as w,j as x,a as e,y as S,t as g,A as $,B as C,k as N,D as R,E as U,f as z,u as B,G as D,w as V,s as F,H as I,z as M,e as m,J as f,v as O}from"./index-D6XtYEjH.js";import{_ as j,a as h,b as L,c as E}from"./EmptySpace-CvGCK4jg.js";import{i as H}from"./sorting-numbers-DK32lHkh.js";const Y={class:"max-w-2xl mx-auto space-y-24"},q={class:"w-full"},G={class:"mb-4 text-xl font-medium text-center"},J={class:"flex mb-4 overflow-hidden border rounded-md border-zinc-700"},W={key:0,class:"relative h-5 mb-4"},X={key:1,class:"mb-16 font-medium text-center"},K={key:2,class:"mb-16 font-medium text-center"},Q={key:3,class:"flex overflow-hidden border rounded-md border-zinc-700"},Z={key:4,class:"mb-16 font-medium text-center"},_={class:"flex overflow-hidden border rounded-md border-zinc-700"},tt={key:5,class:"font-medium text-center"},et={__name:"InsertionSort",props:{log:{type:Array,required:!0},isAscending:{type:Boolean,required:!0}},setup(p){const c=p,d=T(()=>c.log[0].oldState.length),u=T(()=>100/d.value),k=(r,a,s)=>({"bg-blue-700":r.pos>-1&&a<=s&&a>=r.pos,"bg-emerald-600":r.oldState[a]===r.currentNum}),y=r=>{const a=c.log[r],s=a.pos,t=r,l=a.oldState.slice(s,t+1),i=u.value*l.length,b=u.value*s;return{width:i,leftOffset:b}},v=r=>`left: ${y(r).leftOffset}%; width: ${y(r).width}%`,A=r=>{const a=c.log[r],s=a.pos,t=r,l=a.oldState.slice(s,t+1);u.value*l.length;const i=u.value*s,b=u.value*(s+l.length);return[i,b]};return(r,a)=>(n(),o("div",Y,[(n(!0),o(w,null,x(p.log,(s,t)=>(n(),o("div",q,[e("h2",G,"Pass #"+g(t+1),1),e("div",J,[(n(!0),o(w,null,x(s.oldState,(l,i)=>(n(),o("div",{class:$(["flex items-center justify-center w-1/5 py-2 border-r last:border-r-0 border-zinc-700",k(s,i,t)])},g(l),3))),256))]),s.pos>-1?(n(),o("div",W,[e("div",{class:"absolute w-0 h-5 border-l",style:C(`left: ${A(t)[0]}%`)},null,4),e("div",{class:"absolute w-0 h-5 border-l",style:C(`left: ${A(t)[1]}%`)},null,4),e("div",{class:"absolute bottom-0 border-b",style:C(v(t))},null,4)])):S("",!0),s.pos>-1?(n(),o("p",X," Range of numbers that "+g(s.currentNum)+" is "+g(p.isAscending?"less":"greater")+" than ",1)):(n(),o("p",K,g(s.currentNum)+" is not "+g(p.isAscending?"less":"greater")+" than any number to the left, so no changes are made ",1)),s.pos>-1?(n(),o("div",Q,[(n(!0),o(w,null,x(s.intermediateState,(l,i)=>(n(),o("div",{class:$(["flex items-center justify-center w-1/5 py-2 border-r last:border-r-0 border-zinc-700",{"bg-zinc-800":i>s.pos&&i<=t+1}])},g(l),3))),256))])):S("",!0),s.pos>-1?(n(),o("p",Z,"Shift the range to the right")):S("",!0),e("div",_,[(n(!0),o(w,null,x(s.newState,(l,i)=>(n(),o("div",{class:$(["flex items-center justify-center w-1/5 py-2 border-r last:border-r-0 border-zinc-700",{"bg-zinc-800":i===s.pos}])},g(l),3))),256))]),s.pos>-1?(n(),o("p",tt,"Insert "+g(s.currentNum)+" in the empty slot",1)):S("",!0)]))),256))]))}},st={class:"mb-10 space-y-4"},nt={class:"mb-10 space-y-4"},ot={class:"flex items-end gap-4"},rt={class:"flex flex-col flex-1 gap-2"},lt=["disabled"],it=["onUpdate:modelValue"],at={class:"w-20 mx-auto text-center"},dt={key:0},P=100,ht={__name:"InsertionSort",setup(p){const c=N(null),d=R([5,1,4,2,8]),u=N("ascending"),k=T(()=>u.value==="ascending"),y=R({log:null}),v=N(!1);U([d,u],()=>{v.value=!1});const A=()=>{const s=Math.round(Math.random()*P);d.push(s)},r=s=>{d.splice(s,1)},a=()=>{if(!c.value.checkValidity())return c.value.reportValidity();const t=H(d,k.value);y.log=t,v.value=!0};return(s,t)=>(n(),z(L,null,{[B(D).howItWorks.id]:V(()=>[e("div",st,[t[5]||(t[5]=e("p",null,[e("span",{class:"text-main"},"Insertion Sort"),f(" is a sorting algorithm used to sort a series of numbers in order, either from smallest to largest (ascending order), or from largest to smallest (descending order). ")],-1)),e("p",null,[t[3]||(t[3]=f(" To learn more about how the sorting problem, see ")),e("span",{class:"cursor-pointer text-main",onClick:t[0]||(t[0]=l=>s.$router.push("/sorting-numbers/bubble-sort"))},"Bubble Sort"),t[4]||(t[4]=f(". "))]),t[6]||(t[6]=e("h2",{class:"mt-10 text-xl font-semibold"}," The Playing Card Analogy ",-1)),t[7]||(t[7]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[8]||(t[8]=e("p",null," Insertion sort works by inserting each number into its correct sorted position repeatedly, until the entire list is sorted. ",-1)),t[9]||(t[9]=e("p",null," To put this into perspective, imagine you have a hand of playing cards, which you've already sorted. You then draw a card from the deck and need to place it in the correct position in your hand: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/cards-analogy.svg",class:"max-w-lg",caption:"A Sorted Hand of Cards, and a Newly Drawn Card"}),t[10]||(t[10]=e("p",null," Your brain would recognize that the card needs to be placed between the 5 of spades, and the 2 of clubs. This is because all the cards to the right of the 5 of spades are guaranteed to be larger, and all the cards to the left of the 2 of clubs are guaranteed to be smaller. ",-1)),t[11]||(t[11]=e("p",null,[f(" You would then proceed to "),e("span",{class:"text-main"},"slide"),f(" the card in to the correct position in your hand, and "),e("span",{class:"text-main"},"shift"),f(" the other cards if necessary: ")],-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/shifting-cards.svg",class:"max-w-lg",caption:"Shifting All Larger Cards to the Right, Making Space for the New Card"}),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/new-hand.svg",class:"max-w-lg",caption:"New Hand of Cards"}),t[12]||(t[12]=e("p",null," Insertion sort uses the same logic to sort a list of numbers. ",-1)),t[13]||(t[13]=e("h2",{class:"mt-10 text-xl font-semibold"}," An Example of Insertion Sort ",-1)),t[14]||(t[14]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[15]||(t[15]=e("p",null," Consider the following list of numbers: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/unsorted-numbers.svg",class:"max-w-xs",caption:"A List of Unsorted Numbers"}),t[16]||(t[16]=e("p",null," The first number is assumed to be already sorted, and the next item will be the first item the algorithm is going to begin sorting: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/initializing-insertion-sort.svg",class:"max-w-xs",caption:"Initializing the Sorting Algorithm"}),t[17]||(t[17]=e("p",null," For each pass through the numbers, the algorithm finds the range of numbers (from the numbers to the left of the current number) that are less than the current number. Those are then shifted to the right and the current number is inserted into the empty slot. ",-1)),t[18]||(t[18]=e("p",null," During the first pass, since 47 is already larger than 27, nothing happens: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/example-pass-1.svg",class:"max-w-xs",caption:"First Pass of Insertion Sort"}),t[19]||(t[19]=e("p",null," During the second pass, 19 is less than both the numbers to the left, so they are shifted to the right and 19 is inserted into the empty slot: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/example-pass-2.svg",class:"max-w-xs",caption:"Second Pass of Insertion Sort"}),t[20]||(t[20]=e("p",null," During the third pass, 32 is only less than 47, so 47 is shifted to the right to once again make space for 32, which is then inserted into the list: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/example-pass-3.svg",class:"max-w-xs",caption:"Third Pass of Insertion Sort"}),t[21]||(t[21]=e("p",null," Finally, during the fourth and last pass, 12 is less than all of the numbers to the left, so they are all shifted to the right and the number is then inserted into the empty slot: ",-1)),m(h,{src:"/algorithms/sorting-numbers/insertion-sort/example-pass-4.svg",class:"max-w-xs",caption:"Fourth and Final Pass of Insertion Sort"}),t[22]||(t[22]=e("p",null," To sort the list in descending order, the exact same process is repeated, however, the numbers are only shifted if the current number is larger than the ones on the left, not less than. ",-1))])]),[B(D).visualizer.id]:V(()=>[e("div",nt,[t[27]||(t[27]=e("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),t[28]||(t[28]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("form",{class:"space-y-4",ref_key:"form",ref:c},[e("div",ot,[e("div",rt,[t[24]||(t[24]=e("label",{class:"font-medium"},"Ascending / Descending:",-1)),F(e("select",{class:"field","onUpdate:modelValue":t[1]||(t[1]=l=>u.value=l)},t[23]||(t[23]=[e("option",{value:"ascending"},"Ascending",-1),e("option",{value:"descending"},"Descending",-1)]),512),[[I,u.value]])]),e("button",{type:"button",class:"btn",disabled:d.length===8,onClick:A},"Add Row",8,lt)]),e("table",null,[t[25]||(t[25]=e("thead",null,[e("tr",null,[e("th",null,"Numbers to Sort"),e("th")])],-1)),e("tbody",null,[(n(!0),o(w,null,x(d,(l,i)=>(n(),o("tr",null,[e("td",null,[F(e("input",{type:"number","onUpdate:modelValue":b=>d[i]=b,min:"1",max:P},null,8,it),[[O,d[i]]])]),e("td",at,[d.length>1?(n(),z(E,{key:0,onClick:b=>r(i)},null,8,["onClick"])):S("",!0)])]))),256))])]),e("button",{type:"submit",class:"btn",onClick:M(a,["prevent"])},"Run Algorithm")],512),t[29]||(t[29]=e("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),t[30]||(t[30]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),v.value?(n(),o("div",dt,[m(et,{log:y.log,"is-ascending":k.value},null,8,["log","is-ascending"])])):(n(),z(j,{key:1},{default:V(()=>[t[26]||(t[26]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:t[2]||(t[2]=M(()=>a(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[26]}))])]),_:2},1024))}};export{ht as default};
