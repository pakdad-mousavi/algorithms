import{r as x,a as P,c as p,b as d,f as e,e as u,d as U,k as h,l as k,m as f,g as b,i as m,n as V,F as j,j as N,u as a,o,t as $,h as _,v as S,I as J}from"./index-ZjXpc3WB.js";import{_ as L,a as M,T as O}from"./Figure-CMgIP_CQ.js";import{_ as D,a as E}from"./ProcessDetails-DHMdbQKK.js";import{_ as G}from"./Alert-ACyX_w3P.js";import{u as Q}from"./useScheduler-DRt97yvb.js";const W={class:"mb-10 space-y-4"},Z={class:"flex items-end gap-4"},H={class:"flex flex-wrap justify-end w-full gap-2"},K=["disabled"],X={class:"overflow-x-scroll"},Y={class:"highlight-first-column"},ee={class:"flex items-center"},se=["onUpdate:modelValue"],te=["onUpdate:modelValue"],re={class:"w-20 mx-auto text-center"},oe=["onClick"],T=6,me={__name:"ShortestJobFirst",setup(ie){const g=x(null),t=P([[0,4],[0,6],[0,4],[0,5]]),n=x(!1),C=p(()=>{let r=1;return t.slice().map(s=>[r++,...s,s[1]])}),v=p(()=>({runtimeProcesses:C,form:g,hasAlgorithmBeenRan:n,sortFn:(s,i)=>s[2]-i[2]})),{runAlgorithm:y,resetAlgorithmResults:w,queueLog:F,processLog:R,finishedProcesses:q}=Q(),A=p(()=>{const r=Object.groupBy(F,s=>s[0]);return Object.values(r)}),z=()=>{w(n);const s=[t[t.length-1][0]+1,Math.round(Math.random()*10)];t.push(s)},B=r=>{w(n),t.splice(r,1)},I=()=>{t.forEach(r=>{r[0]=0})};return(r,s)=>(o(),d("div",null,[s[9]||(s[9]=e("h1",{class:"mb-4 text-2xl font-semibold"}," Shortest Job First Scheduling ",-1)),s[10]||(s[10]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("div",W,[s[5]||(s[5]=e("p",null,[e("span",{class:"text-main"},"Shortest Job First (SJF) Scheduling"),f(" is an algorithm used by systems to schedule the order by which processes are ran by the CPU. As the name suggests, the processes which require the shortest amount of time to complete (lowest burst time) are the ones which will be ran first. ")],-1)),u(G,{"alert-style":"warning"},{default:b(()=>s[2]||(s[2]=[e("p",null,[f(" This is a non-preemptive version of this algorithm, meaning that processes are not interrupted until they are completed, similar to how the first come first serve (FCFS) algorithm works. The latter is known as "),e("span",{class:"text-main"},"Shortest Remaining Time First (SRTF)"),f(" where a running process can be interrupted if a shorter one arrives. ")],-1)])),_:1,__:[2]}),s[6]||(s[6]=U('<p> This algorithm is considered to be one of the best in terms of waiting time, however it requires knowledge of each process&#39;s burst time in advanced; this isn&#39;t always possible in real-world systems. This algorithm may also cause <span class="text-main">starvation:</span> longer processes may never get picked if shorter ones keep arriving. </p><p> Regardless of the drawbacks, this algorithm reduces the average waiting time better than the <span class="text-main">First Come First Serve (FCFS)</span> algorithm in many cases, making it a simple and useful way of scheduling processes in a system. </p><h1 class="mb-4 text-xl font-semibold"> Understanding the Process </h1><hr class="mb-4 border-neutral-800"><ol class="grid grid-cols-1 space-y-4 gap-x-4"><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 1: Gather process info </span><p> Each process needs to have an arrival time (when the process enters the ready queue), a burst time (how long the process needs). No additional information, such as a priority, is needed. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 2: Track the current time </span><p> Initialize the system clock (usually starting at 0). This value will increase in small steps, or 1ms for our case, to simulate real-time execution of the processes. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 3: Check for new arrivals </span><p> At each time step, check if any new processes have arrived (i.e., their arrival time matches the current time). Add those to the ready queue. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 4: Choose the shortest job from the queue </span><p> If the CPU is idle and there are processes in the ready queue, select the one with the lowest burst time and begin processing it. If there are multiple processes with the same burst time, then the one which arrives first will be picked. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 5: Run the process for 1ms (or 1 unit) </span><p> Run the process for 1ms, then repeat step 3 to add any processes that may have arrived to the ready queue. This is to ensure that the queue is up to date. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 6: Run the process until completed </span><p> Repeat step 5 until the entire process is completed. Once completed, the CPU is idle once again, ready for its next process. </p></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 7: Record completion time and update logs </span><div> After a process finishes, record its completion time. From this, you can calculate: <ul class="list-disc list-inside"><li>Turnaround Time = Completion Time - Arrival Time</li><li>Waiting Time = Turnaround Time - Burst Time</li></ul></div></li><li class="p-4 border rounded-md border-zinc-700"><span class="font-medium text-main"> Step 8: Repeat step 3 to step 8 until all processes are finished </span><p> Repeat all the steps stated for each process until the CPU is idle, and the ready queue is empty. For additional metrics, such as the waiting time and turnaround time, make sure to record the finish time of each process. </p></li></ol>',5)),u(L,{src:"/algorithms/cpu-scheduling/sjf/shortest-job-first.svg",caption:"Shortest Job First Scheduling Algorithm"}),s[7]||(s[7]=e("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),s[8]||(s[8]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("form",{ref_key:"form",ref:g,class:"w-full space-y-4 gap-x-4"},[e("div",Z,[e("div",H,[e("button",{class:"btn",type:"button",onClick:m(I,["prevent"])}," Set All Arrival Times to Zero "),e("button",{class:V(["btn",{disabled:t.length===T}]),type:"button",onClick:m(z,["prevent"]),disabled:t.length===T}," Add Row ",10,K)])]),e("div",X,[e("table",null,[s[3]||(s[3]=e("thead",null,[e("tr",null,[e("th",null,"Process"),e("th",null,"Arrival Time"),e("th",null,"Burst Time"),e("th")])],-1)),e("tbody",Y,[(o(!0),d(j,null,N(t,(i,c)=>(o(),d("tr",{key:c},[e("td",ee,[e("span",null," P"+$(c+1),1)]),e("td",null,[_(e("input",{type:"number",min:"0",max:"10",required:"","onUpdate:modelValue":l=>i[0]=l},null,8,se),[[S,i[0]]])]),e("td",null,[_(e("input",{type:"number",min:"1",max:"20",required:"","onUpdate:modelValue":l=>i[1]=l},null,8,te),[[S,i[1]]])]),e("td",re,[t.length>1?(o(),d("div",{key:0,class:"flex items-center justify-center duration-100 border border-transparent rounded-md cursor-pointer bg-zinc-700 aspect-square w-7 group hover:border-rose-600 active:translate-y-1",onClick:l=>B(c)},[u(a(J),{class:"text-rose-500",tag:"span",size:"20px"},{default:b(()=>[u(a(O))]),_:1})],8,oe)):k("",!0)])]))),128))])])]),e("button",{onClick:s[0]||(s[0]=m(()=>a(y)(v.value),["prevent"])),class:"btn",type:"submit"}," Run Algorithm ")],512),n.value?(o(),h(D,{key:0,"process-log":a(R),"queue-log":A.value,quantum:1},null,8,["process-log","queue-log"])):k("",!0),n.value?(o(),h(E,{key:1,"process-data":t,"finished-processes":a(q)},null,8,["process-data","finished-processes"])):(o(),h(M,{key:2},{default:b(()=>[s[4]||(s[4]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:s[1]||(s[1]=m(()=>a(y)(v.value),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[4]}))])]))}};export{me as default};
