import{r as g,a as z,w as P,b as x,d as k,T as R,C as U,o as a,e as n,f as h,g as t,h as y,i as m,u as A,j as d,v as B,n as q,F as T,l as S,B as C,t as N,I as $,k as D}from"./index-ovJRpk65.js";import{_ as L,r as W}from"./memory-management-Bj5mpX0Y.js";import{_ as M,T as j,a as H}from"./Figure-CnSFvtgE.js";import"./Alert-CRDLfolQ.js";const E={key:0,class:"mb-10 space-y-4"},G={key:1,class:"mb-10 space-y-4"},J={class:"flex flex-wrap items-end gap-4"},O={class:"flex flex-col gap-2"},Q={class:"flex flex-col flex-1 gap-2"},X={class:"flex gap-2"},Y=["disabled"],Z={class:"overflow-x-scroll"},_=["onUpdate:modelValue"],ee=["onUpdate:modelValue"],te=["value"],se=["onUpdate:modelValue"],oe={class:"w-20 mx-auto text-center"},le=["onClick"],me={__name:"WorstFit",props:{tab:{type:String,required:!0}},setup(b){const F=U(),v=g(null),p=g(4),u=g(100),l=z([{isAllocation:!0,pid:1,size:30},{isAllocation:!0,pid:2,size:20},{isAllocation:!0,pid:3,size:20},{isAllocation:!1,pid:2},{isAllocation:!0,pid:4,size:15}]),w=z({isSuccessful:!1,memoryLog:[]}),c=g(!1);P([l,u],()=>{c.value=!1});const K=()=>{const f=p.value,e=new Set(l.filter(s=>s.isAllocation).map(s=>s.pid)),o=new Set(l.filter(s=>!s.isAllocation).map(s=>s.pid)),r=[...e].filter(s=>!o.has(s));if(e.size<f){let s=null;for(let i=1;i<=f;i++)if(!e.has(i)){s=i;break}const I={isAllocation:!0,pid:s,size:10};l.push(I)}else if(r.length>0){const s=Math.floor(Math.random()*r.length),i={isAllocation:!1,pid:r[s]};l.push(i)}},V=()=>{if(!v.value.checkValidity())return v.value.reportValidity();const{isSuccessful:e,memoryLog:o}=W(l,u.value,"worstFit");w.isSuccessful=e,w.memoryLog=o,c.value=!0};return(f,e)=>(a(),x(R,null,{default:k(()=>[(a(),n("div",{key:b.tab},[b.tab==="How It Works"?(a(),n("div",E,[e[7]||(e[7]=t("p",null,[m(" The "),t("span",{class:"text-main"},"Worst Fit Algorithm"),m(" is a memory allocation algorithm, which is also used in used in dynamic memory management. It's job is also to manage free space in the main memory. It works by allocating the largest free block available in memory to the process requesting memory. ")],-1)),t("p",null,[e[4]||(e[4]=m(" As memory is allocated and deallocated to and from processes, the memory becomes ")),e[5]||(e[5]=t("span",{class:"text-main"},"fragmented",-1)),e[6]||(e[6]=m(". To understand how memory works and how fragmentation occurs, see the ")),t("span",{class:"cursor-pointer text-main",onClick:e[0]||(e[0]=o=>A(F).push("/memory-management/first-fit"))}," First Fit Algorithm. ")]),e[8]||(e[8]=t("h2",{class:"mt-10 text-xl font-semibold"}," How It Works ",-1)),e[9]||(e[9]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[10]||(e[10]=t("p",null,[m(" The worst fit algorithm goes through all free blocks of memory which are large enough for the request, and from those blocks, chooses the largest one. Its goal is to reduce "),t("span",{class:"text-main"},"external fragmentation"),m(" by breaking up memory into larger blocks which may be reused more often later. ")],-1)),e[11]||(e[11]=t("p",null," Lets say we have allocated 50KB to process 1, then 80KB to process 2, and finally 10KB to process 3. Between each process, there's 20KB, 40KB, and 50KB worth of free space respectively: ",-1)),y(M,{src:"/algorithms/memory-management/worst-fit/example-allocation.svg",class:"max-w-2xl",caption:"Example Memory Allocation"}),e[12]||(e[12]=t("p",null," The worst fit algorithm would look amongst all the free blocks of memory that are large enough for the process (40KB and 50KB), and choose the largest block amongst those. By choosing the largest free block, it will leave the most amount of free space possible, in hopes that it can be reused later: ",-1)),y(M,{src:"/algorithms/memory-management/worst-fit/worst-fit-algorithm.svg",class:"max-w-2xl",caption:"How the Worst Fit Algorithm Chooses a Memory Block"})])):h("",!0),b.tab==="Algorithm Visualizer"?(a(),n("div",G,[e[18]||(e[18]=t("h2",{class:"text-xl font-semibold"}," Step by Step Illustration ",-1)),e[19]||(e[19]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:v},[t("div",J,[t("div",O,[e[13]||(e[13]=t("label",{class:"font-medium"},"Number of Processes:",-1)),d(t("input",{type:"number",class:"w-full field sm:w-60",min:"1",max:"6",required:"","onUpdate:modelValue":e[1]||(e[1]=o=>p.value=o)},null,512),[[B,p.value]])]),t("div",Q,[e[14]||(e[14]=t("label",{class:"font-medium"},"Total Memory Size (KB):",-1)),d(t("input",{type:"number",class:"w-full field sm:w-60",min:"10",max:"150",required:"","onUpdate:modelValue":e[2]||(e[2]=o=>u.value=o)},null,512),[[B,u.value]])]),t("div",X,[t("button",{class:q(["btn",{disabled:l.length===12}]),type:"button",onClick:e[3]||(e[3]=o=>K()),disabled:l.length===12}," Add Row ",10,Y)])]),t("div",Z,[t("table",null,[e[16]||(e[16]=t("thead",null,[t("tr",null,[t("th",null,"Action Type"),t("th",null,"Process ID"),t("th",null,"Size (KB)"),t("th")])],-1)),t("tbody",null,[(a(!0),n(T,null,S(l,(o,r)=>(a(),n("tr",{key:r},[t("td",null,[d(t("select",{"onUpdate:modelValue":s=>o.isAllocation=s},e[15]||(e[15]=[t("option",{value:!0},"Allocation",-1),t("option",{value:!1},"Deallocation",-1)]),8,_),[[C,o.isAllocation]])]),t("td",null,[d(t("select",{"onUpdate:modelValue":s=>o.pid=s},[(a(!0),n(T,null,S(p.value,s=>(a(),n("option",{value:s},N(s),9,te))),256))],8,ee),[[C,o.pid]])]),t("td",null,[o.isAllocation?d((a(),n("input",{key:0,min:"10",type:"number","onUpdate:modelValue":s=>o.size=s},null,8,se)),[[B,o.size]]):h("",!0)]),t("td",oe,[l.length>1?(a(),n("div",{key:0,class:"flex items-center justify-center duration-100 border border-transparent rounded-md cursor-pointer bg-zinc-700 aspect-square w-7 group hover:border-rose-600 active:translate-y-1",onClick:s=>l.splice(r,1)},[y(A($),{class:"text-rose-500",tag:"span",size:"20px"},{default:k(()=>[y(A(j))]),_:1})],8,le)):h("",!0)])]))),128))])])]),t("button",{type:"submit",class:"btn",onClick:D(V,["prevent"])},"Run Algorithm")],512),e[20]||(e[20]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[21]||(e[21]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),c.value?(a(),x(L,{key:0,"has-algorithm-been-ran":c.value,"total-memory":u.value,"alg-result":w,actions:l},null,8,["has-algorithm-been-ran","total-memory","alg-result","actions"])):(a(),x(H,{key:1},{default:k(()=>[e[17]||(e[17]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:D(V,["prevent"]),class:"btn"}," Run Algorithm ")]),_:1}))])):h("",!0)]))]),_:1}))}};export{me as default};
