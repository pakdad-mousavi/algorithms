import{c as r,o as n,a as t,F as g,j as c,t as p,k as y,D as S,l as q,E as M,f as k,u as $,G as B,w as x,s as N,J as P,z as V,e as l,A as a,v as T,y as I}from"./index-CMEMORM0.js";import{_ as U,a as i,b as j,c as D}from"./EmptySpace-B7dEQeoq.js";import{c as O}from"./sorting-numbers-C_bZSW4o.js";import{_ as L}from"./Alert-CGLaWT9s.js";const W={class:"space-y-14"},E={class:"flex mx-auto border rounded-lg border-neutral-700 max-w-max"},G={class:"flex items-center justify-center text-sm border-r size-10 sm:text-base sm:size-14 border-neutral-700 last:border-0"},H={class:"flex mx-auto max-w-max gap-x-4"},J={class:"flex mx-auto text-sm border border-b-0 rounded-lg rounded-b-none sm:text-base border-neutral-700 max-w-max"},K={class:"flex items-center justify-center border-r size-10 sm:size-14 border-neutral-700 last:border-0"},Q={class:"flex mx-auto text-sm border rounded-lg rounded-t-none sm:text-base border-neutral-700 max-w-max"},X={class:"flex items-center justify-center border-r size-10 sm:size-14 border-neutral-700 last:border-0"},Y={class:"space-y-4"},Z={class:"flex mx-auto text-sm border rounded-lg sm:text-base border-neutral-700 max-w-max"},_={class:"flex items-center justify-center border-r size-10 sm:size-14 border-neutral-700 last:border-0"},ee={__name:"CountingSort",props:{unsortedNumbers:{type:Array,required:!0},range:{type:Number,required:!0},counts:{type:Array,required:!0},reconstructedArrays:{type:Array,required:!0}},setup(b){return(h,s)=>(n(),r("div",W,[t("div",null,[s[0]||(s[0]=t("h3",{class:"mb-4 sm:text-lg font-medium text-center"},"Unsorted Numbers:",-1)),t("div",E,[(n(!0),r(g,null,c(b.unsortedNumbers,o=>(n(),r("div",G,p(o),1))),256))])]),t("div",null,[s[2]||(s[2]=t("h3",{class:"mb-4 sm:text-lg font-medium text-center"},"Counting Array:",-1)),t("div",H,[s[1]||(s[1]=t("div",{class:"hidden sm:block"},[t("div",{class:"flex items-center h-14"},[t("h4",null,"Values:")]),t("div",{class:"flex items-center h-14"},[t("h4",null,"Counts:")])],-1)),t("div",null,[t("div",J,[(n(!0),r(g,null,c(b.range,o=>(n(),r("div",K,p(o),1))),256))]),t("div",Q,[(n(!0),r(g,null,c(b.counts,o=>(n(),r("div",X,p(o),1))),256))])])])]),t("div",null,[s[3]||(s[3]=t("h3",{class:"mb-4 sm:text-lg font-medium text-center"},"Sorting Array:",-1)),t("div",Y,[(n(!0),r(g,null,c(b.reconstructedArrays,o=>(n(),r("div",Z,[(n(!0),r(g,null,c(o,w=>(n(),r("div",_,p(w),1))),256))]))),256))])])]))}},te={class:"mb-10 space-y-4"},se={class:"mb-10 space-y-4"},ne={class:"flex items-end gap-4"},re={class:"flex flex-col flex-1 gap-2"},oe=["disabled"],le=["onUpdate:modelValue"],ae={class:"w-20 mx-auto text-center"},ie={key:0},z=8,ce={__name:"CountingSort",setup(b){const h=y(null),s=S([4,2,2,8,3,3,1]),o=y("ascending"),w=q(()=>o.value==="ascending"),u=S({range:null,counts:null,reconstructedArrays:null}),v=y(!1);M([s,o],()=>{v.value=!1});const F=()=>{const d=Math.round(Math.random()*z);s.push(d)},R=d=>{s.splice(d,1)},A=()=>{if(!h.value.checkValidity())return h.value.reportValidity();const{range:e,counts:m,reconstructedArrays:f}=O(s,w.value);u.range=e,u.counts=m,u.reconstructedArrays=f,v.value=!0};return(d,e)=>(n(),k(j,null,{[$(B).howItWorks.id]:x(()=>[t("div",te,[e[8]||(e[8]=t("p",null,[t("span",{class:"text-main"},"Counting Sort"),a(" is a non-comparitive sorting algorithm used to sort a series of numbers in order, either from smallest to largest (ascending order), or from largest to smallest (descending order). ")],-1)),t("p",null,[e[4]||(e[4]=a(" Unlike most other algorithms, such as ")),t("span",{class:"text-main",onClick:e[0]||(e[0]=m=>d.$router.push("/sorting-numbers/quick-sort"))},"Quick Sort"),e[5]||(e[5]=a(" or ")),t("span",{class:"text-main",onClick:e[1]||(e[1]=m=>d.$router.push("/sorting-numbers/quick-sort"))},"Merge Sort"),e[6]||(e[6]=a(", which rely on comparing numbers together, counting sort - as the name suggests - relies on counting the occurences of each value. "))]),e[9]||(e[9]=t("h2",{class:"mt-10 text-xl font-semibold"}," Sorting Colored Balls ",-1)),e[10]||(e[10]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[11]||(e[11]=t("p",null," To understand how counting sort works, we first sort a bunch of colored balls. Consider the following: ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/colored-balls.svg",class:"max-w-lg",caption:"A Series of Colored Balls"}),e[12]||(e[12]=t("p",null," We have 8 colored balls of 4 different colors: green, blue, orange, and pink. To sort these balls, we'll give each color a value, green will be 1, blue will be 2, orange will be 3, and pink will be 4. This will be the order we will be sorting in. ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/valued-colored-balls.svg",class:"max-w-lg",caption:"A Series of Valued Colored Balls"}),e[13]||(e[13]=t("p",null,[a(" Perfect, now lets start sorting! Counting sort relies on counting the number of occurences of each value, so we will need to use a "),t("span",{class:"text-main"},"counting array"),a(". This will help us keep track of how many of each color there is. ")],-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/balls-counting-array.svg",class:"max-w-xs",caption:"A Counting Array"}),e[14]||(e[14]=t("p",null," After a quick manual count, we can see that there are 2 balls with the value of one, 3 balls with the value of 2, 1 ball with the value of 3, and 2 balls with the value of 4. ",-1)),e[15]||(e[15]=t("p",null," Now, we can simply put the balls back in order using our counting array without ever needing to compare a single value. First, we need to place 2 balls with the value of 1 (green): ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/sorting-balls-1.svg",class:"max-w-xs",caption:"Placing the First Colored Balls Back Into Place"}),e[16]||(e[16]=t("p",null," Next, we need 3 balls with the value of 2 (blue): ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/sorting-balls-2.svg",class:"max-w-xs",caption:"Placing the Second Set of Colored Balls Back Into Place"}),e[17]||(e[17]=t("p",null," Then comes a single ball with the value of 3 (orange): ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/sorting-balls-3.svg",class:"max-w-sm",caption:"Placing the Third Set of Colored Balls Back Into Place"}),e[18]||(e[18]=t("p",null," Finally, we need 2 balls with the value of 4 (pink): ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/sorting-balls-4.svg",class:"max-w-lg",caption:"Placing the Final Set of Colored Balls Back Into Place"}),e[19]||(e[19]=t("h2",{class:"mt-10 text-xl font-semibold"}," Using Counting Sort On Real Numbers ",-1)),e[20]||(e[20]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[21]||(e[21]=t("p",null," Counting sort works the exact same way for real numbers, with the exception that we no longer have to assign the values ourselves; the numbers are our values! Consider the following list of unsorted numbers: ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/unsorted-numbers.svg",class:"max-w-sm",caption:"A List of Unsorted Numbers"}),e[22]||(e[22]=t("p",null," Here, we can directly create our counting array without assigning values manually: ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/counting-array.svg",class:"max-w-lg",caption:"A Counting Array"}),l(L,{"alert-style":"note"},{default:x(()=>e[7]||(e[7]=[t("div",{class:"space-y-4"},[t("p",null," Look carefully, do you notice that we have the values 5, 6, and 7 in our counting array with counts of zero? Why do we need to include that? "),t("p",null," Our counting array doesn't know the values or their counts beforehand, so when we are creating the counting array, it will have to be big enough for all the possible values which may exist. "),t("p",null,[a(" Specifically, our counting array will always be of size "),t("span",{class:"text-main"},"max - min + 1"),a(". In the example above, that's 8 - 1 + 1, which is equal to 8, giving us 8 slots in our counting array. ")])],-1)])),_:1,__:[7]}),e[23]||(e[23]=t("p",null," Finally, we can reconstruct the sorted array like so: ",-1)),l(i,{src:"/algorithms/sorting-numbers/counting-sort/sorted-numbers.svg",class:"max-w-sm",caption:"Reconstructing the Sorted Array"}),e[24]||(e[24]=t("p",null," To sort in descending order, we just need to go the opposite way in our counting array. ",-1)),e[25]||(e[25]=t("h2",{class:"mt-10 text-xl font-semibold"}," Key Metrics ",-1)),e[26]||(e[26]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[27]||(e[27]=t("p",null,[a(" Counting sort has a "),t("span",{class:"text-main"},"time complexity"),a(" of "),t("span",{class:"text-main"},"O(n + k)"),a(", where n is the number of elements in our unsorted list, and k is the range of values that exist (max - min + 1). ")],-1)),e[28]||(e[28]=t("p",null," Counting sort is best used when k is not much larger than n. If it was, you'd waste a ton of memory making a giant counting array. For example, if you wanted to sort 10,000 numbers which range from 0 to 1 billion, k would be equal to 1 billion, which is awful compared to other sorting algorithms! ",-1)),e[29]||(e[29]=t("p",null," On the other hand, when sorting 1,000,000 exam scores which range from 0 - 100, n is 1,000,000 and k is only 101, making counting sort a perfect choice for this problem. ",-1))])]),[$(B).visualizer.id]:x(()=>[t("div",se,[e[34]||(e[34]=t("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),e[35]||(e[35]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:h},[t("div",ne,[t("div",re,[e[31]||(e[31]=t("label",{class:"font-medium"},"Ascending / Descending:",-1)),N(t("select",{class:"field","onUpdate:modelValue":e[2]||(e[2]=m=>o.value=m)},e[30]||(e[30]=[t("option",{value:"ascending"},"Ascending",-1),t("option",{value:"descending"},"Descending",-1)]),512),[[P,o.value]])]),t("button",{type:"button",class:"btn",disabled:s.length===8,onClick:F},"Add Row",8,oe)]),t("table",null,[e[32]||(e[32]=t("thead",null,[t("tr",null,[t("th",null,"Numbers to Sort"),t("th")])],-1)),t("tbody",null,[(n(!0),r(g,null,c(s,(m,f)=>(n(),r("tr",null,[t("td",null,[N(t("input",{type:"number","onUpdate:modelValue":C=>s[f]=C,min:"1",max:z},null,8,le),[[T,s[f]]])]),t("td",ae,[s.length>1?(n(),k(D,{key:0,onClick:C=>R(f)},null,8,["onClick"])):I("",!0)])]))),256))])]),t("button",{type:"submit",class:"btn",onClick:V(A,["prevent"])},"Run Algorithm")],512),e[36]||(e[36]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[37]||(e[37]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),v.value?(n(),r("div",ie,[l(ee,{"unsorted-numbers":s,range:u.range,counts:u.counts,"reconstructed-arrays":u.reconstructedArrays},null,8,["unsorted-numbers","range","counts","reconstructed-arrays"]),a(" "+p(u.log),1)])):(n(),k(U,{key:1},{default:x(()=>[e[33]||(e[33]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:e[3]||(e[3]=V(()=>A(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[33]}))])]),_:2},1024))}};export{ce as default};
