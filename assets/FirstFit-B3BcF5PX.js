import{r as y,a as B,w as T,b as k,u as g,t as F,d as h,e as t,f as d,v as A,h as i,i as I,F as z,g as M,k as m,l as b,o as a,C,m as U,j as D,I as K}from"./index-CE2k5yp4.js";import{_ as q,a as v,b as R,T as L}from"./Figure-CHKq4HFN.js";import{_ as N,r as _}from"./memory-management-C6m87P5_.js";import"./Alert-DKm2gy0g.js";const $={class:"mb-10 space-y-4"},j={class:"mb-10 space-y-4"},E={class:"flex flex-wrap items-end gap-4"},H={class:"flex flex-col gap-2"},W={class:"flex flex-col flex-1 gap-2"},G={class:"flex gap-2"},J=["disabled"],O={class:"overflow-x-scroll"},Q=["onUpdate:modelValue"],X=["onUpdate:modelValue"],Y=["value"],Z=["onUpdate:modelValue"],ee={class:"w-20 mx-auto text-center"},te=["onClick"],ne={__name:"FirstFit",setup(se){const x=y(null),f=y(4),u=y(100),o=B([{isAllocation:!0,pid:1,size:30},{isAllocation:!0,pid:2,size:35},{isAllocation:!0,pid:3,size:20},{isAllocation:!1,pid:2},{isAllocation:!0,pid:4,size:15}]),w=B({isSuccessful:!1,memoryLog:[]}),p=y(!1);T([o,u],()=>{p.value=!1});const S=()=>{const c=f.value,e=new Set(o.filter(s=>s.isAllocation).map(s=>s.pid)),l=new Set(o.filter(s=>!s.isAllocation).map(s=>s.pid)),r=[...e].filter(s=>!l.has(s));if(e.size<c){let s=null;for(let n=1;n<=c;n++)if(!e.has(n)){s=n;break}const V={isAllocation:!0,pid:s,size:10};o.push(V)}else if(r.length>0){const s=Math.floor(Math.random()*r.length),n={isAllocation:!1,pid:r[s]};o.push(n)}},P=()=>{if(!x.value.checkValidity())return x.value.reportValidity();const{isSuccessful:e,memoryLog:l}=_(o,u.value,"firstFit");w.isSuccessful=e,w.memoryLog=l,p.value=!0};return(c,e)=>(a(),k(R,null,{[g(F).howItWorks.id]:h(()=>[t("div",$,[e[3]||(e[3]=t("p",null,[b(" The "),t("span",{class:"text-main"},"First Fit Algorithm"),b(" is a memory allocation strategy used in dynamic memory management. It's job is to manage free space in the main memory. ")],-1)),e[4]||(e[4]=t("p",null," As processes are ran by the CPU, they will request for certain amounts of memory, and the system needs to allocate this memory efficiently. The first fit algorithm's job is to find the very first empty block of memory which is big enough for the process's request. ",-1)),e[5]||(e[5]=t("h2",{class:"mt-10 text-xl font-semibold"}," External Fragmentation ",-1)),e[6]||(e[6]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[7]||(e[7]=t("p",null," Lets say we have a block of empty memory, like so: ",-1)),m(v,{src:"/algorithms/memory-management/first-fit/empty-memory.svg",caption:"Empty Memory",class:"max-w-2xl"}),e[8]||(e[8]=t("p",null," As processes arrive in the CPU, the system needs to allocate free memory to each process. Let's say we have 3 processes, P1, P2, and P3, each requesting 50KB, 50KB, and 80KB worth of memory respectively: ",-1)),m(v,{src:"/algorithms/memory-management/first-fit/memory-allocation.svg",class:"max-w-lg",caption:"Allocating Memory for P1, P2, and P3"}),e[9]||(e[9]=t("p",null,[b(" When a process finishes executing, the memory allocated to it earlier becomes free. However, the freed memory block may not be connected to other free memory blocks, resulting in "),t("span",{class:"text-main"},"external fragmentation"),b(", like so: ")],-1)),m(v,{src:"/algorithms/memory-management/first-fit/external-fragmentation.svg",class:"max-w-lg",caption:"External Fragmentation"}),e[10]||(e[10]=t("h2",{class:"mt-10 text-xl font-semibold"}," How It Works ",-1)),e[11]||(e[11]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[12]||(e[12]=t("p",null," The first fit algorithm becomes useful when a process requests memory, and the memory is fragmented. Its job is to find the first block of memory large enough to fit the request. For example, if there are three empty blocks of memory, each worth 20KB, 50KB, and 40KB of space respectively, the 50KB block would be chosen: ",-1)),m(v,{src:"/algorithms/memory-management/first-fit/first-fit-algorithm.svg",class:"max-w-2xl",caption:"How the First Fit Algorithm Chooses a Memory Block"})])]),[g(F).visualizer.id]:h(()=>[t("div",j,[e[18]||(e[18]=t("h2",{class:"text-xl font-semibold"}," Step by Step Illustration ",-1)),e[19]||(e[19]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:x},[t("div",E,[t("div",H,[e[13]||(e[13]=t("label",{class:"font-medium"},"Number of Processes:",-1)),d(t("input",{type:"number",class:"w-full field sm:w-60",min:"1",max:"6",required:"","onUpdate:modelValue":e[0]||(e[0]=l=>f.value=l)},null,512),[[A,f.value]])]),t("div",W,[e[14]||(e[14]=t("label",{class:"font-medium"},"Total Memory Size (KB):",-1)),d(t("input",{type:"number",class:"w-full field sm:w-60",min:"10",max:"150",required:"","onUpdate:modelValue":e[1]||(e[1]=l=>u.value=l)},null,512),[[A,u.value]])]),t("div",G,[t("button",{class:"btn",type:"button",onClick:e[2]||(e[2]=l=>S()),disabled:o.length===12}," Add Row ",8,J)])]),t("div",O,[t("table",null,[e[16]||(e[16]=t("thead",null,[t("tr",null,[t("th",null,"Action Type"),t("th",null,"Process ID"),t("th",null,"Size (KB)"),t("th")])],-1)),t("tbody",null,[(a(!0),i(z,null,I(o,(l,r)=>(a(),i("tr",{key:r},[t("td",null,[d(t("select",{"onUpdate:modelValue":s=>l.isAllocation=s},e[15]||(e[15]=[t("option",{value:!0},"Allocation",-1),t("option",{value:!1},"Deallocation",-1)]),8,Q),[[C,l.isAllocation]])]),t("td",null,[d(t("select",{"onUpdate:modelValue":s=>l.pid=s},[(a(!0),i(z,null,I(f.value,s=>(a(),i("option",{value:s},U(s),9,Y))),256))],8,X),[[C,l.pid]])]),t("td",null,[l.isAllocation?d((a(),i("input",{key:0,min:"10",type:"number","onUpdate:modelValue":s=>l.size=s},null,8,Z)),[[A,l.size]]):D("",!0)]),t("td",ee,[o.length>1?(a(),i("div",{key:0,class:"flex items-center justify-center duration-100 border border-transparent rounded-md cursor-pointer bg-zinc-700 aspect-square w-7 group hover:border-rose-600 active:translate-y-1",onClick:s=>o.splice(r,1)},[m(g(K),{class:"text-rose-500",tag:"span",size:"20px"},{default:h(()=>[m(g(L))]),_:1})],8,te)):D("",!0)])]))),128))])])]),t("button",{type:"submit",class:"btn",onClick:M(P,["prevent"])},"Run Algorithm")],512),e[20]||(e[20]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[21]||(e[21]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),p.value?(a(),k(N,{key:0,"has-algorithm-been-ran":p.value,"total-memory":u.value,"alg-result":w,actions:o},null,8,["has-algorithm-been-ran","total-memory","alg-result","actions"])):(a(),k(q,{key:1},{default:h(()=>[e[17]||(e[17]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:M(P,["prevent"]),class:"btn"}," Run Algorithm ")]),_:1}))])]),_:2},1024))}};export{ne as default};
