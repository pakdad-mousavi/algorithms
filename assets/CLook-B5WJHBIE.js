import{k as h,D as x,E as N,f as v,u as q,G as T,w as p,a as t,c,s as b,v as S,H as V,j as $,F as D,z as R,e as r,J as s,o as n,y as K}from"./index-CeUG55mh.js";import{_ as M,a,b as F,c as U}from"./EmptySpace-CRxZ2R5w.js";import{_ as B,r as E}from"./SeekTimeGraph-BGyc2aYD.js";import{_ as I}from"./Alert-BU-zUHPy.js";const H={class:"mb-10 space-y-4"},j={class:"mb-10 space-y-4"},z={class:"flex flex-wrap items-end gap-4"},G={class:"flex flex-col gap-2"},J={class:"flex flex-col flex-1 gap-2"},P=["disabled"],Q=["onUpdate:modelValue"],W={class:"w-20 mx-auto text-center"},X={key:0},w=199,A=0,se={__name:"CLook",setup(Y){const g=h(null),l=x([98,183,37,122,14,124,65,67]),d=h(53),u=h("left"),m=x({orderedRequests:null,totalSeekTime:null}),f=h(!1);N([l,d,u],()=>{f.value=!1});const O=()=>{const i=Math.round(Math.random()*w);l.push(i)},L=i=>{l.splice(i,1)},y=()=>{if(!g.value.checkValidity())return g.value.reportValidity();const{orderedRequests:e,totalSeekTime:o}=E(d.value,l.slice(),"cLook",u.value);m.orderedRequests=e,m.totalSeekTime=o,f.value=!0};return(i,e)=>(n(),v(F,null,{[q(T).howItWorks.id]:p(()=>[t("div",H,[t("p",null,[e[5]||(e[5]=s(" The ")),e[6]||(e[6]=t("span",{class:"text-main"},"C-LOOK (circular LOOK)",-1)),e[7]||(e[7]=s(" algorithm is a variant of the ")),t("span",{class:"cursor-pointer text-main",onClick:e[0]||(e[0]=o=>i.$router.push("/disk-scheduling/look"))},"LOOK"),e[8]||(e[8]=s(" algorithm. It works similarly to LOOK and C-SCAN, however, instead of scanning back and forth, it only scans in one direction, and only scans until the last requests. "))]),t("p",null,[e[9]||(e[9]=s(" This is a disk scheduling algorithm, which requires some basic knowledge about a hard disk. To learn more about disk architecture, see the ")),t("span",{class:"cursor-pointer text-main",onClick:e[1]||(e[1]=o=>i.$router.push("/disk-scheduling/first-come-first-serve"))},"First Come First Serve (FCFS)"),e[10]||(e[10]=s(" algorithm. "))]),e[12]||(e[12]=t("h2",{class:"mt-10 text-xl font-semibold"}," How the Algorithm Works ",-1)),e[13]||(e[13]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[14]||(e[14]=t("p",null,[s(" The C-LOOK variant goes towards the "),t("span",{class:"text-main"},"head direction"),s(" (either left or right), then jumps to the furthest request on the opposite side, and finally scans back towards the same direction. ")],-1)),e[15]||(e[15]=t("p",null," To illustrate this, we need a set of disk requests, and a current head position: ",-1)),r(a,{src:"/algorithms/disk-scheduling/c-look/disk-requests.svg",caption:"A Set of Disk Requests",class:"max-w-lg"}),e[16]||(e[16]=t("p",null," Then, lets order the requests from smallest to largest. Unlike C-SCAN, including the first and last track of the disk is unnecessary: ",-1)),r(a,{src:"/algorithms/disk-scheduling/c-look/ordered-disk-requests.svg",caption:"Disk Requests Sorted in Ascending Order",class:"max-w-lg"}),e[17]||(e[17]=t("p",null," Just like C-SCAN, C-LOOK assumes that the requests are ordered in a circular manner. To illustrate this, the first and last request need to be connected together: ",-1)),r(a,{src:"/algorithms/disk-scheduling/c-look/circular-disk-requests.svg",caption:"The Left-Most and Right-Most Tracks Connected Together",class:"max-w-md"}),e[18]||(e[18]=t("p",null,[s(" The "),t("span",{class:"text-main"},"head direction"),s(" determines whether the C-SCAN algorithm goes towards the left or the right. ")],-1)),e[19]||(e[19]=t("p",null," Assuming a left head direction, the algorithm starts from the current head position and moves towards the left, responding to any pending requests. If you look carefully, you'll notice how there's a large gap from the first request and the last request (14 - 183): ",-1)),r(a,{src:"/algorithms/disk-scheduling/c-look/c-look-left.svg",caption:"C-LOOK Algorithm with a Left Head Direction",class:"max-w-lg"}),e[20]||(e[20]=t("p",null," Although there is a large gap, it is smaller than C-SCAN, as it avoids always scanning until the end of the disk. ",-1)),r(I,{alertStyle:"note"},{default:p(()=>e[11]||(e[11]=[t("p",null," The jump from 0 to 199 is important because in reality, the tracks of the disk are not arranged in a circular manner, so the disk head cannot go from 199 to 0 in 1 unit. It will actually have to travel back to the opposite end before servicing any remaining requests. ",-1)])),_:1,__:[11]}),e[21]||(e[21]=t("p",null," Similarly, if the head direction is right, then the C-LOOK algorithm will travel towards the right and service any requests along the way: ",-1)),e[22]||(e[22]=t("p",null,[s(" Now, using the final order of the requests, a "),t("span",{class:"text-main"},"seek-time graph"),s(" can be plotted. The following graph illustrates the seek-time graph for the points shown earlier, with a left head direction: ")],-1)),r(a,{src:"/algorithms/disk-scheduling/c-look/c-look-seek-time-graph.svg",caption:"The Seek Time Graph for the C-LOOK Algorithm"})])]),[q(T).visualizer.id]:p(()=>[t("div",j,[e[28]||(e[28]=t("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),e[29]||(e[29]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:g},[t("div",z,[t("div",G,[e[23]||(e[23]=t("label",{class:"font-medium"},"Current Head Position:",-1)),b(t("input",{type:"number",class:"field",min:A,max:w,"onUpdate:modelValue":e[2]||(e[2]=o=>d.value=o)},null,512),[[S,d.value]])]),t("div",J,[e[25]||(e[25]=t("label",{class:"font-medium"},"Head Direction:",-1)),b(t("select",{class:"field","onUpdate:modelValue":e[3]||(e[3]=o=>u.value=o)},e[24]||(e[24]=[t("option",{value:"left"},"Left",-1),t("option",{value:"right"},"Right",-1)]),512),[[V,u.value]])]),t("button",{type:"button",class:"btn",disabled:l.length===15,onClick:O},"Add Row",8,P)]),t("table",null,[e[26]||(e[26]=t("thead",null,[t("tr",null,[t("th",null,"Disk Requests"),t("th")])],-1)),t("tbody",null,[(n(!0),c(D,null,$(l,(o,k)=>(n(),c("tr",null,[t("td",null,[b(t("input",{type:"number","onUpdate:modelValue":C=>l[k]=C,min:A,max:w},null,8,Q),[[S,l[k]]])]),t("td",W,[l.length>1?(n(),v(U,{key:0,onClick:C=>L(k)},null,8,["onClick"])):K("",!0)])]))),256))])]),t("button",{type:"submit",class:"btn",onClick:R(y,["prevent"])},"Run Algorithm")],512),e[30]||(e[30]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[31]||(e[31]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),f.value?(n(),c("div",X,[r(B,{"ordered-requests":m.orderedRequests,"total-seek-time":m.totalSeekTime},null,8,["ordered-requests","total-seek-time"])])):(n(),v(M,{key:1},{default:p(()=>[e[27]||(e[27]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:e[4]||(e[4]=R(()=>y(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[27]}))])]),_:2},1024))}};export{se as default};
