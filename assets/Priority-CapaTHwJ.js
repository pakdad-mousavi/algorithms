import{r as P,a as I,c as f,b as u,u as a,t as q,d as p,e,j as C,g as m,h as F,i as L,F as N,k as d,l as i,o as l,m as Q,f as g,v}from"./index-BvRK4c5E.js";import{_ as j,a as c,b as D,c as E}from"./TrashButton-D2TUWdmM.js";import{_ as M,a as W}from"./ProcessDetails-Be96ZoOK.js";import{_ as O}from"./Alert-oTNbB0SR.js";import{u as z}from"./useScheduler-C0UfX0fT.js";const H={class:"mb-10 space-y-4"},Z={class:"mb-10 space-y-4"},G={class:"flex items-end gap-4"},J={class:"flex flex-wrap justify-end w-full gap-2"},K=["disabled"],X={class:"overflow-x-scroll"},Y={class:"highlight-first-column"},_=["onUpdate:modelValue"],ee=["onUpdate:modelValue"],te=["onUpdate:modelValue"],se={class:"w-20 mx-auto text-center"},re=6,pe={__name:"Priority",setup(ie){const w=P(null),o=I([[0,4,1],[0,6,2],[0,4,3],[0,5,4]]),h=P(!1),A=f(()=>{let s=1;return o.slice().map(t=>[s++,...t,t[1]])}),b=f(()=>({runtimeProcesses:A,form:w,hasAlgorithmBeenRan:h,sortFn:(t,r)=>t[3]-r[3]})),{runAlgorithm:x,resetAlgorithmResults:k,queueLog:$,processLog:T,finishedProcesses:S}=z(),V=f(()=>{const s=Object.groupBy($,t=>t[0]);return Object.values(s)}),U=()=>{k();const s=o[o.length-1],t=s[2]+1<=10?s[2]+1:s[2],r=[s[0]+1,Math.round(Math.random()*10),t];o.push(r)},B=s=>{k(),o.splice(s,1)},R=()=>{o.forEach(s=>{s[0]=0})};return(s,t)=>(l(),u(D,null,{[a(q).howItWorks.id]:p(()=>[e("div",H,[t[14]||(t[14]=e("p",null,[e("span",{class:"text-main"},"Priority Scheduling"),i(" is a CPU scheduling technique in which every process is assigned a priority value, and the CPU always executes the highest-priority process available at any given time. ")],-1)),e("p",null,[t[5]||(t[5]=i(" It works exactly like the ")),e("span",{class:"cursor-pointer text-main",onClick:t[0]||(t[0]=r=>s.$router.push("/cpu-scheduling/first-come-first-serve"))},"first come first serve (FCFS)"),t[6]||(t[6]=i(" algorithm, with the exception that it uses a ")),t[7]||(t[7]=e("span",{class:"text-main"},"priority queue",-1)),t[8]||(t[8]=i(" rather than a standard queue. "))]),e("p",null,[t[9]||(t[9]=i(" Prior knowledge about the FCFS algorithm is needed for this algorithm. To learn more, see the ")),e("span",{class:"cursor-pointer text-main",onClick:t[1]||(t[1]=r=>s.$router.push("/cpu-scheduling/first-come-first-serve"))},"first come first serve (FCFS)"),t[10]||(t[10]=i(" algorithm. "))]),t[15]||(t[15]=e("h2",{class:"mt-10 text-xl font-semibold"}," How a Priority Queue Works ",-1)),t[16]||(t[16]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[17]||(t[17]=e("p",null," A priority queue works similarly to a queue, however, it relies on a given priority field (which each item has) to determine which item, or process, comes first in the queue. ",-1)),t[18]||(t[18]=e("p",null,[i(" Consider the following processes, each with a unique "),e("span",{class:"text-main"},"priority"),i(". For the sake of brevity, all processes are assumed to have no "),e("span",{class:"text-main"},"arrival time"),i(", so that they all arrive in the order defined: ")],-1)),t[19]||(t[19]=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Process ID:"),e("th",null,"Burst Time:"),e("th",null,"Priority:")])]),e("tbody",null,[e("tr",null,[e("td",null,"P1"),e("td",null,"4"),e("td",null,"3")]),e("tr",null,[e("td",null,"P2"),e("td",null,"2"),e("td",null,"1")]),e("tr",null,[e("td",null,"P3"),e("td",null,"3"),e("td",null,"2")])])],-1)),t[20]||(t[20]=e("p",null," The following diagram depicts an empty priority queue: ",-1)),d(c,{src:"/algorithms/cpu-scheduling/priority/empty-priority-queue.svg",class:"max-w-xs",caption:"An Empty Priority Queue"}),t[21]||(t[21]=e("p",null," As processes arrive and need to enter the queue, they are placed in the queue based on their priority. Similar to how VIPs can skip the queue at a fancy restaurant, processes with a higher priority are placed ahead of the ones with a lower priority. ",-1)),d(O,{alertStyle:"note"},{default:p(()=>t[11]||(t[11]=[e("p",null," Processes with a lower priority value are considered to have a higher priority than processes with higher priority values. For example, P2 (with a priority of 1) has a higher priority than (P1). The lower the priority value, the higher the priority. ",-1)])),_:1,__:[11]}),d(c,{src:"/algorithms/cpu-scheduling/priority/items-entering-priority-queue.svg",class:"max-w-xs",caption:"P1 to P3 Entering the Priority Queue"}),t[22]||(t[22]=e("p",null," When it comes to removing processes from the priority queue, the process with the highest priority is removed first: ",-1)),d(c,{src:"/algorithms/cpu-scheduling/priority/items-leaving-priority-queue.svg",class:"max-w-xl",caption:"P2 Leaving the Priority Queue"}),t[23]||(t[23]=e("h2",{class:"mt-10 text-xl font-semibold"}," How the Algorithm Works ",-1)),t[24]||(t[24]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[25]||(t[25]=e("p",null," The algorithm itself works exactly like the first come first serve algorithm, with the exception that it uses a priority queue to keep track of which processes the CPU needs to run first. ",-1)),t[26]||(t[26]=e("p",null," Processes are also given a priority so that the priority queue can determine where in the list of processes to insert the newly arrived process. Also note that if multiple processes have the same priority, then they will enter the queue based on the order in which they arrive. ",-1)),e("p",null,[t[12]||(t[12]=i(" To learn about how exactly the first come first serve (FCFS) algorithm operates, see the ")),e("span",{class:"cursor-pointer text-main",onClick:t[2]||(t[2]=r=>s.$router.push("/cpu-scheduling/first-come-first-serve"))},"first come first serve (FCFS)"),t[13]||(t[13]=i(" algorithm. "))])])]),[a(q).visualizer.id]:p(()=>[e("div",Z,[e("form",{ref_key:"form",ref:w,class:"w-full space-y-4 gap-x-4"},[e("div",G,[e("div",J,[e("button",{class:"btn",type:"button",onClick:m(R,["prevent"])}," Set All Arrival Times to Zero "),e("button",{class:"btn",type:"button",onClick:m(U,["prevent"]),disabled:o.length===re}," Add Row ",8,K)])]),e("div",X,[e("table",null,[t[27]||(t[27]=e("thead",null,[e("tr",null,[e("th",null,"Process"),e("th",null,"Arrival Time"),e("th",null,"Burst Time"),e("th",null,"Priority"),e("th")])],-1)),e("tbody",Y,[(l(!0),F(N,null,L(o,(r,y)=>(l(),F("tr",{key:y},[e("td",null," P"+Q(y+1),1),e("td",null,[g(e("input",{type:"number",min:"0",max:"10",required:"","onUpdate:modelValue":n=>r[0]=n},null,8,_),[[v,r[0]]])]),e("td",null,[g(e("input",{type:"number",min:"1",max:"20",required:"","onUpdate:modelValue":n=>r[1]=n},null,8,ee),[[v,r[1]]])]),e("td",null,[g(e("input",{type:"number",min:"1",max:"10",required:"","onUpdate:modelValue":n=>r[2]=n},null,8,te),[[v,r[2]]])]),e("td",se,[o.length>1?(l(),u(E,{key:0,onClick:n=>B(y)},null,8,["onClick"])):C("",!0)])]))),128))])])]),e("button",{onClick:t[3]||(t[3]=m(()=>a(x)(b.value),["prevent"])),class:"btn",type:"submit"}," Run Algorithm ")],512),h.value?(l(),u(M,{key:0,"process-log":a(T),"queue-log":V.value,quantum:1},null,8,["process-log","queue-log"])):C("",!0),h.value?(l(),u(W,{key:1,"process-data":o,"finished-processes":a(S)},null,8,["process-data","finished-processes"])):(l(),u(j,{key:2},{default:p(()=>[t[28]||(t[28]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:t[4]||(t[4]=m(()=>a(x)(b.value),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[28]}))])]),_:2},1024))}};export{pe as default};
