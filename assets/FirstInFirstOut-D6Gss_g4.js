import{a as v,r as f,w as I,b as p,u as x,t as w,d as c,e as t,f as M,v as A,h as F,i as O,F as P,g as k,k as i,l as a,o,j as S}from"./index-Cexxxrzm.js";import{_ as T,r as B}from"./virtual-memory-management-C3MG0ioW.js";import{_ as C,a as m,b as U,c as $}from"./TrashButton-Wh3O4H6L.js";const H={class:"mb-10 space-y-4"},N={class:"mb-10 space-y-4"},q={class:"flex items-end gap-x-4"},W={class:"flex flex-col flex-1 gap-y-2"},D=["disabled"],E={class:"space-y-4 overflow-x-auto"},z=["onUpdate:modelValue"],j={class:"w-20 mx-auto text-center"},Q={__name:"FirstInFirstOut",setup(G){const u=v({log:null,totalPageFaults:null}),s=v([1,2,3,4,2,1,5,2,4,5,3,5]),n=f(3),d=f(null),g=f(!1);I([s,n],()=>{g.value=!1});const R=()=>{const r=Math.round(Math.random()*9+1);s.push(r)},V=r=>{s.splice(r,1)},y=async()=>{if(!d.value.checkValidity())return d.value.reportValidity();g.value=!0;const{log:e,totalPageFaults:l}=B(s.slice(),n.value,"fifo");u.log=e,u.totalPageFaults=l};return(r,e)=>(o(),p(U,null,{[x(w).howItWorks.id]:c(()=>[t("div",H,[e[4]||(e[4]=t("p",null,[a(" The "),t("span",{class:"text-main"},"First In First Out (FIFO)"),a(" is a "),t("span",{class:"text-main"},"page replacement algorithm"),a(" used in virtual memory management. Its purpose is to choose a suitable "),t("span",{class:"text-main"},"victim page"),a(" to swap with the requested page. ")],-1)),e[5]||(e[5]=t("h2",{class:"mt-10 text-xl font-semibold"}," Virtual Memory ",-1)),e[6]||(e[6]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[7]||(e[7]=t("p",null,[t("span",{class:"text-main"},"Virtual memory"),a(" is an abstraction of the physical memory (RAM), and is managed separately by the OS and the MMU (memory management unit). Processes only see the virtual memory, and think they have access to a large contiguous memory space. ")],-1)),e[8]||(e[8]=t("p",null," Virtual memory provides the illusion that there is more RAM than physically available on the computer, allowing the OS to run more processes than if only the RAM was available, by temporarily storing unused data on the hard disk. ",-1)),i(m,{src:"/algorithms/virtual-memory-management/fifo/virtual-memory.svg",class:"max-w-xl",caption:"Space Being Allocated to RAM From Secondary Memory"}),e[9]||(e[9]=t("p",null,[a(" Virtual memory is split into "),t("span",{class:"text-main"},"pages"),a(", each page typically worth around 4 KB of memory, and the RAM is split into "),t("span",{class:"text-main"},"frames"),a(", each frame being the same size as a page. Behind the curtains, the OS and MMU use a "),t("span",{class:"text-main"},"page table"),a(" for each process, to map each of their pages to a frame. ")],-1)),i(m,{src:"/algorithms/virtual-memory-management/fifo/page-to-frame-mapping.svg",class:"max-w-xl",caption:"How Pages Are Mapped to Frames"}),e[10]||(e[10]=t("p",null,[a(" Only the pages necessary for the process to run at the time are stored in the RAM, the rest are stored in the "),t("span",{class:"text-main"},"swap space"),a(" of the disk. This also occurs if there are more pages than there are free frames on the RAM. ")],-1)),e[11]||(e[11]=t("h2",{class:"mt-10 text-xl font-semibold"}," How Pages Are Accessed ",-1)),e[12]||(e[12]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[13]||(e[13]=t("p",null,[a(" When a process tries to access data in a certain page, it triggers the MMU to try and translate the "),t("span",{class:"text-main"},"virtual address"),a(" to a "),t("span",{class:"text-main"},"physical address"),a(" using the page table. If the page the process tried to access is currently mapped to a frame, then the translation occurs and access is granted immediately: ")],-1)),i(m,{src:"/algorithms/virtual-memory-management/fifo/successful-page-access.svg",class:"max-w-xl",caption:"An Example of How a Process Can Access Data in a Page"}),e[14]||(e[14]=t("h2",{class:"mt-10 text-xl font-semibold"}," Page Faults ",-1)),e[15]||(e[15]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[16]||(e[16]=t("p",null,[a(" A "),t("span",{class:"text-main"},"page fault"),a(" is when the MMU attempts to translate a virtual address into a physical address using a page table, however the respective page is not found in the page table. ")],-1)),e[17]||(e[17]=t("p",null," This means that the page is on the secondary storage and not in the RAM, so the MMU triggers a page fault, which is caught by the OS. The OS then proceeds to load the page into the RAM and update the page table, after which the process is repeated, but now with the page in memory. ",-1)),i(m,{src:"/algorithms/virtual-memory-management/fifo/page-fault.svg",class:"max-w-xl",caption:"An Example of a Page Fault and How It's Resolved"}),e[18]||(e[18]=t("h2",{class:"mt-10 text-xl font-semibold"}," How the FIFO Algorithm Works ",-1)),e[19]||(e[19]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[20]||(e[20]=t("p",null," Given that a page fault has occured, and there are no free frames available to load the requested page into, the OS runs a page replacement algorithm. In this case, the OS would run the first in first out algorithm. ",-1)),e[21]||(e[21]=t("p",null," The algorithm chooses a victim page and writes it to the disk, thus freeing up a frame in the RAM. The requested page is then loaded into the frame. ",-1)),e[22]||(e[22]=t("p",null," The FIFO algorithm keeps track of which pages entered a frame first using a queue, and then chooses the first item in the queue as the victim page. Here is an example with 4 pages and 3 frames: ",-1)),i(m,{src:"/algorithms/virtual-memory-management/fifo/fifo-algorithm.svg",class:"max-w-lg",caption:"How The FIFO Algorithm Works"})])]),[x(w).visualizer.id]:c(()=>[t("div",N,[e[26]||(e[26]=t("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),e[27]||(e[27]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:d},[t("div",q,[t("div",W,[e[23]||(e[23]=t("label",{class:"font-medium"},"Number of Frames:",-1)),M(t("input",{type:"number",class:"w-full field sm:w-60",min:"1",max:"5","onUpdate:modelValue":e[0]||(e[0]=l=>n.value=l)},null,512),[[A,n.value]])]),t("button",{type:"button",class:"btn",onClick:e[1]||(e[1]=l=>R()),disabled:s.length===12},"Add Row",8,D)]),t("div",E,[t("table",null,[e[24]||(e[24]=t("thead",null,[t("tr",null,[t("th",null,"Page ID"),t("th")])],-1)),t("tbody",null,[(o(!0),F(P,null,O(s,(l,h)=>(o(),F("tr",null,[t("td",null,[M(t("input",{type:"number",min:"1",max:"10","onUpdate:modelValue":b=>s[h]=b},null,8,z),[[A,s[h]]])]),t("td",j,[s.length>1?(o(),p($,{key:0,onClick:b=>V(h)},null,8,["onClick"])):S("",!0)])]))),256))])]),t("button",{type:"submit",class:"btn",onClick:e[2]||(e[2]=k(l=>y(),["prevent"]))},"Run Algorithm")])],512),e[28]||(e[28]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[29]||(e[29]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),g.value?(o(),p(T,{key:0,"frame-count":n.value,log:u.log,"reference-str":s,"total-page-faults":u.totalPageFaults},null,8,["frame-count","log","reference-str","total-page-faults"])):(o(),p(C,{key:1},{default:c(()=>[e[25]||(e[25]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:e[3]||(e[3]=k(()=>y(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[25]}))])]),_:2},1024))}};export{Q as default};
