import{c as u,o as n,a as t,F as f,j as h,B as x,t as c,k as y,D as N,E as S,f as w,u as k,G as T,w as g,s as C,v as q,z as A,e as m,A as p}from"./index-BlRSe9Fv.js";import{_ as z,a as b,b as E}from"./EmptySpace-BAyMinpV.js";import{_ as B}from"./Alert-IkDZ_r6i.js";const W={class:"space-y-10"},$={class:"grid max-w-2xl grid-cols-10 mx-auto text-center rounded-md"},O={class:"mb-2 text-lg font-medium text-center"},V={class:"grid max-w-2xl grid-cols-10 mx-auto text-center rounded-md"},F={class:"grid max-w-2xl grid-cols-10 mx-auto mb-20 text-center rounded-md"},I={__name:"SieveOfEratosthenes",props:{total:{type:Number,required:!0},primes:{type:Array,required:!0},log:{type:Array,required:!0}},setup(o){return(d,l)=>(n(),u("div",W,[t("div",null,[l[0]||(l[0]=t("h3",{class:"mb-2 text-lg font-medium text-center"},"List of Numbers:",-1)),t("div",$,[(n(!0),u(f,null,h(o.total,r=>(n(),u("div",{class:x(["flex items-center justify-center p-4 border border-zinc-700",{"!border-l-transparent":r%10!==1,"border-b-transparent":r<o.total-9,"bg-zinc-800 text-zinc-600":r===1}])},c(r),3))),256))])]),(n(!0),u(f,null,h(o.log,([r,s])=>(n(),u("div",null,[t("h3",O,"Cross Out All Multiples of "+c(r)+":",1),t("div",V,[(n(!0),u(f,null,h(o.total,i=>(n(),u("div",{class:x(["flex items-center justify-center p-4 border border-zinc-700",{"!border-l-transparent":i%10!==1,"border-b-transparent":i<o.total-9,"bg-zinc-800 text-zinc-600":!s.includes(i)}])},c(i),3))),256))])]))),256)),l[1]||(l[1]=t("h3",{class:"mb-2 text-lg font-medium text-center"},"Collect All Remaining Primes:",-1)),t("div",F,[(n(!0),u(f,null,h(o.primes,(r,s)=>(n(),u("div",{class:x(["flex items-center justify-center p-4 border border-zinc-700",{"!border-l-transparent":s%10}])},c(r),3))),256))])]))}},L=o=>{const d=[],l=new Array(o+1).fill(!0);l[0]=!1,l[1]=!1;for(let s=2;s*s<=o;s++)if(l[s]){for(let a=s*s;a<=o;a+=s)l[a]=!1;const i=[];for(let a=2;a<=o;a++)l[a]&&i.push(a);d.push([s,i.slice()])}const r=[];for(let s=2;s<=o;s++)l[s]&&r.push(s);return{primes:r,log:d}},R={class:"mb-10 space-y-4"},M={class:"mb-10 space-y-4"},j={class:"flex flex-col w-full gap-2"},P={key:0},U={__name:"SieveOfEratosthenes",setup(o){const d=y(null),l=y(30),r=N({log:null,primes:null}),s=y(!1);S(l,()=>{s.value=!1});const i=()=>{if(!d.value.checkValidity())return d.value.reportValidity();const{primes:e,log:v}=L(l.value);r.primes=e,r.log=v,s.value=!0};return(a,e)=>(n(),w(E,null,{[k(T).howItWorks.id]:g(()=>[t("div",R,[e[3]||(e[3]=t("p",null,[p(" The "),t("span",{class:"text-main"},"Sieve of Eratosthenes"),p(" introduces a very efficient way of finding all "),t("span",{class:"text-main"},"prime numbers"),p(" up to a certain number. A prime number is a number that is only divisible by 1 and itself. ")],-1)),e[4]||(e[4]=t("h2",{class:"mt-10 text-xl font-semibold"}," The Bouncer Analogy ",-1)),e[5]||(e[5]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[6]||(e[6]=t("p",null," The Sieve of Eratosthenes works by crossing out all multiples of the numbers that are uncrossed. Imagine you're at a giant party with all the numbers standing in a line. ",-1)),e[7]||(e[7]=t("p",null,` The bouncer (the sieve) starts letting the numbers in one by one. First up is the number 2. The bouncer says "cool, you're a prime number, welcome in! But all your multiples? Sorry, you're not special enough", and proceeds to remove 4, 6, 8, 10... from the line. `,-1)),e[8]||(e[8]=t("p",null," Next is the number 3. Again, the bouncer lets 3 in the party, but gets rid of all of its multiples, 6, 9, 12, 15... Some of them might already have been kicked out, but thats fine. ",-1)),e[9]||(e[9]=t("p",null," This process keeps repeating until the only numbers left inside the party are actually prime numbers; that is the concept behind the sieve of Eratosthenes. ",-1)),e[10]||(e[10]=t("h2",{class:"mt-10 text-xl font-semibold"}," Understanding the Sieve of Eratosthenes ",-1)),e[11]||(e[11]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[12]||(e[12]=t("p",null," To begin using this algorithm, we need to first define a total. We will be finding all prime numbers up to this number. For this example, we'll take the total to be 20. ",-1)),e[13]||(e[13]=t("p",null," Once we have a total, we can calculate a limit. The limit is calculated as the square root of the total; we will have to repeat the algorithm's process all the way up to this number. ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/total-and-limit.svg",class:"max-w-xs",caption:"Choosing a Total and Calculating the Limit"}),e[14]||(e[14]=t("p",null," The next step is to list all of the numbers from 1 to our total in an array. We'll be finding all of the prime numbers in this list: ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/numbers-to-total.svg",class:"max-w-xl",caption:"Listing All Numbers Up To the Total"}),e[15]||(e[15]=t("p",null," We can now start using the sieve of Eratosthenes! The first step is to simply cross out the 1, since 1 is a factor of all integers: ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/removal-1.svg",class:"max-w-xl",caption:"Crossing Out the First Number"}),e[16]||(e[16]=t("p",null," We now move on to the next number: 2. Is 2 smaller than or equal to our limit (4) and uncrossed? Yes, so we need to cross out all multiples of 2 (except 2 itself). ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/removal-2.svg",class:"max-w-xl",caption:"Crossing Out All Multiples of 2"}),e[17]||(e[17]=t("p",null," Just like that, we've already gotten ridden of 50% of our list of numbers. Now we can move on to the next number, 3. Just like before, we'll have to check: is 3 less that or equal to our limit (4) and uncrossed? Again, the answer is yes, so we'll cross out all multiples of 3: ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/removal-3.svg",class:"max-w-xl",caption:"Crossing Out All Multiples of 3"}),e[18]||(e[18]=t("p",null," Great! Lets continue with the next number, 4. Is 4 less than or equal to our limit (4) and uncrossed? Well, while it is equal to our limit, it is already crossed out, so we can skip it: ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/removal-4.svg",class:"max-w-xl",caption:"Skipping the Number 4"}),e[19]||(e[19]=t("p",null," Since the next number (5) is greater than our limit (4), we won't have to bother crossing it out. ",-1)),e[20]||(e[20]=t("p",null," Just like that, we're done. The numbers that we are left with should all be prime numbers: 2, 3, 5, 7, 11, 13, 17, and 19: ",-1)),m(b,{src:"/algorithms/number-theory/sieve-of-eratosthenes/prime-numbers.svg",class:"max-w-lg",caption:"List of Prime Numbers"}),m(B,{"alert-style":"note"},{default:g(()=>e[2]||(e[2]=[t("div",{class:"space-y-4"},[t("p",null," Why do we only need to cross out numbers up to the limit, the square root of the total? "),t("p",null,[p(" Given that n is our total, supposed a number "),t("span",{class:"text-main"},"m ≤ n"),p(" is "),t("span",{class:"text-main"},"composite"),p(" (not prime), then it can be written as "),t("span",{class:"text-main"},"m = a × b"),p(", where a and b are two integers. ")]),t("p",null," If both a and b were greater than √n, then their product a × b would be greater than n, but that can't happen, since m ≤ n, so at least one of the factors have to be ≤ √n. In other words, if m is composite, it will definitely be crossed out by the time we handle all primes up to √n. "),t("p",null," Lets look at a quick example with n = 25, and the limit being √25 = 5. We'll use 21 as m. The factors of 21 are 3 and 7; since 3 ≤ 5, 21 will get crossed out when we process 3. "),t("p",null," Now lets take 25: its factors are 5 and 5. Since 5 ≤ 5, it gets crossed out at exactly 5. We never have to actually cross out numbers larger than √25, because by then all their multiples ≤ 25 are already gone. ")],-1)])),_:1,__:[2]})])]),[k(T).visualizer.id]:g(()=>[t("div",M,[e[23]||(e[23]=t("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),e[24]||(e[24]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:d},[t("div",j,[e[21]||(e[21]=t("label",{class:"font-medium"},"Total:",-1)),C(t("input",{type:"number",class:"!w-full field","onUpdate:modelValue":e[0]||(e[0]=v=>l.value=v),min:10,max:100},null,512),[[q,l.value]])]),t("button",{type:"submit",class:"btn",onClick:A(i,["prevent"])},"Run Algorithm")],512),e[25]||(e[25]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[26]||(e[26]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),s.value?(n(),u("div",P,[m(I,{total:l.value,primes:r.primes,log:r.log},null,8,["total","primes","log"])])):(n(),w(z,{key:1},{default:g(()=>[e[22]||(e[22]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:e[1]||(e[1]=A(()=>i(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[22]}))])]),_:2},1024))}};export{U as default};
