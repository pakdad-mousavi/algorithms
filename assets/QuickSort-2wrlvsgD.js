import{c as n,o as s,F as b,j as f,a as e,t as c,B as p,A as r,k as T,D as C,l as Q,E as R,f as $,u as A,G as N,w as k,s as F,J as z,z as M,e as m,v as j,y as D}from"./index-CMEMORM0.js";import{_ as I,a as g,b as U,c as G}from"./EmptySpace-B7dEQeoq.js";import{_ as E}from"./Alert-CGLaWT9s.js";import{q as L}from"./sorting-numbers-C_bZSW4o.js";const W={class:"space-y-10"},H={class:"p-4 space-y-8 border rounded-md border-zinc-700"},J={class:"flex flex-col items-center text-center lg:flex-row lg:items-end gap-x-2 gap-y-4 lg:text-left"},K={class:"flex flex-col items-center lg:w-3/5 xl:w-1/2 gap-y-2"},O={class:"font-medium"},P={class:"max-w-lg lg:w-2/5 xl:w-1/2"},X={class:"text-main"},Y={class:"flex flex-col items-center text-center lg:flex-row lg:items-end gap-x-2 gap-y-4 lg:text-left"},Z={class:"flex flex-col items-center lg:w-3/5 xl:w-1/2 gap-y-2"},_={class:"flex items-center gap-x-1 sm:gap-x-2"},tt={class:"flex flex-col items-center lg:mt-20 gap-y-2"},et={class:"flex flex-col items-center gap-y-2"},st={class:"flex items-center gap-x-1 sm:gap-x-2"},ot={__name:"QuickSort",props:{log:{type:Array,required:!0}},setup(B){const x=u=>Math.ceil(u.length/2)-1,a=["border-zinc-700","border-emerald-600","border-amber-600","border-cyan-600","border-purple-600","border-rose-600","border-yellow-600","border-blue-600"],h=["text-neutral-300","text-emerald-600","text-amber-600","text-cyan-600","text-purple-600","text-rose-600","text-yellow-600","text-blue-600"],d=u=>a[u-1],w=u=>h[u-1];return(u,l)=>(s(),n("div",W,[(s(!0),n(b,null,f(B.log,(i,v)=>(s(),n("div",null,[e("h2",{class:p(["mb-2 text-lg font-bold text-center",w(v+1)])},c(v!==0?`Splitting Subgroup ${String.fromCharCode(v+64)}`:" Splitting The Main Group"),3),e("div",H,[e("div",J,[e("div",K,[e("h3",O,c(i.before.id!==1?`Subgroup ${String.fromCharCode(i.before.id+63)}`:"Main Group"),1),e("div",{class:p(["flex overflow-hidden border rounded-md max-w-max",d(i.before.id)])},[(s(!0),n(b,null,f(i.before.group,(o,t)=>(s(),n("div",{class:p(["flex items-center justify-center w-8 text-sm border-r sm:text-base sm:w-12 lg:w-11 xl:w-12 aspect-square last:border-r-0",[d(i.before.id),{"bg-zinc-800":t===x(i.before.group)}]])},c(o),3))),256))],2)]),e("div",P,[l[0]||(l[0]=r(" Firstly, the middle number of the subgroup ")),e("span",X,"("+c(i.before.group[x(i.before.group)])+")",1),l[1]||(l[1]=r(" is chosen as the ")),l[2]||(l[2]=e("span",{class:"text-main"},"pivot",-1)),l[3]||(l[3]=r(" for our comparisons. "))])]),e("div",Y,[e("div",Z,[e("div",_,[(s(!0),n(b,null,f(i.after,o=>(s(),n("div",{class:p(["flex overflow-hidden border rounded-md max-w-max",d(o.id)])},[(s(!0),n(b,null,f(o.group,t=>(s(),n("div",{class:p(["flex items-center justify-center w-8 text-sm border-r sm:text-base sm:w-12 lg:w-11 xl:w-12 aspect-square last:border-r-0",d(o.id)])},c(t),3))),256))],2))),256))])]),l[4]||(l[4]=e("div",{class:"max-w-lg lg:w-2/5 xl:w-1/2"}," The group is then split into two smaller subgroups, one with numbers less than the pivot, one with numbers larger than it. ",-1))]),e("div",tt,[e("div",et,[l[5]||(l[5]=e("h3",{class:"font-medium"}," New Sorted Group ",-1)),e("div",st,[(s(!0),n(b,null,f(i.state,o=>(s(),n("div",{class:p(["flex overflow-hidden border rounded-md max-w-max",d(o.id)])},[(s(!0),n(b,null,f(o.group,t=>(s(),n("div",{class:p(["flex items-center justify-center w-8 text-sm border-r sm:text-base sm:w-12 lg:w-11 xl:w-12 aspect-square last:border-r-0",d(o.id)])},c(t),3))),256))],2))),256))])]),l[6]||(l[6]=e("div",{class:"max-w-lg text-center"}," Finally, place the newly formed subgroups back into the position where it came from. ",-1))])])]))),256))]))}},rt={class:"mb-10 space-y-4"},lt={class:"mb-10 space-y-4"},nt={class:"flex items-end gap-4"},it={class:"flex flex-col flex-1 gap-2"},at=["disabled"],ut=["onUpdate:modelValue"],mt={class:"w-20 mx-auto text-center"},dt={key:0},V=100,xt={__name:"QuickSort",setup(B){const x=T(null),a=C([27,32,47,19,12,18,13]),h=T("ascending"),d=Q(()=>h.value==="ascending"),w=C({log:null}),u=T(!1);R([a,h],()=>{u.value=!1});const l=()=>{const o=Math.round(Math.random()*V);a.push(o)},i=o=>{a.splice(o,1)},v=()=>{if(!x.value.checkValidity())return x.value.reportValidity();const t=L(a,d.value);w.log=t,u.value=!0};return(o,t)=>(s(),$(U,null,{[A(N).howItWorks.id]:k(()=>[e("div",rt,[t[19]||(t[19]=e("p",null,[e("span",{class:"text-main"},"Quick Sort"),r(" is a "),e("span",{class:"text-main"},"divide and conquer"),r(" used to sort a series of numbers in order, either from smallest to largest (ascending order), or from largest to smallest (descending order). ")],-1)),e("p",null,[t[5]||(t[5]=r(" To learn more about how the sorting problem, see ")),e("span",{class:"cursor-pointer text-main",onClick:t[0]||(t[0]=y=>o.$router.push("/sorting-numbers/bubble-sort"))},"Bubble Sort"),t[6]||(t[6]=r(". "))]),t[20]||(t[20]=e("h2",{class:"mt-10 text-xl font-semibold"}," How Quick Sort Works ",-1)),t[21]||(t[21]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("p",null,[t[7]||(t[7]=r(" Similarly to ")),e("span",{class:"cursor-pointer text-main",onClick:t[1]||(t[1]=y=>o.$router.push("/sorting-numbers/merge-sort"))},"merge sort"),t[8]||(t[8]=r(", this algorithm relies on splitting the list of numbers repeatedly. It works picking a ")),t[9]||(t[9]=e("span",{class:"text-main"},"pivot",-1)),t[10]||(t[10]=r(", and then creating two subgroups where the first subgroup contains all numbers smaller than the pivot, and the right subgroup contains all numbers larger than the pivot. "))]),t[22]||(t[22]=e("p",null," This process is repeated for all resulting subgroups until every subgroup contains only a single value. ",-1)),t[23]||(t[23]=e("p",null," Consider the following list of numbers: ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/unsorted-numbers.svg",class:"max-w-md",caption:"A Series of Unsorted Numbers"}),t[24]||(t[24]=e("p",null," First, a pivot needs to be chosen. Although the pivot can be any value in the list, choosing a poor pivot can affect the efficiency of the algorithm. For the sake of brevity, the middle value of the list will be our pivot. ",-1)),t[25]||(t[25]=e("p",null," After a pivot is chosen, the each of the other values are compared to it. The values smaller than the pivot are separated into one subgroup, and the ones larger than it go into another. ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/sample-split-1.svg",class:"max-w-md",caption:"The First Split of Quick Sort"}),t[26]||(t[26]=e("p",null," The process is then repeated for all subgroups with more than one value (which is both of them in this case). ",-1)),t[27]||(t[27]=e("p",null," A pivot is chosen for both subgroups, and they are split into their own subgroups containing elements smaller than and greater than the pivot. Note that if all the values are smaller than or greater than the pivot, then only one subgroup is made. ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/sample-split-2.svg",class:"max-w-md",caption:"The Second Split of Quick Sort"}),t[28]||(t[28]=e("p",null," Now, there is only one subgroup left containing more than one value. The process is repeated one final time for that subgroup like so: ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/sample-split-3.svg",class:"max-w-md",caption:"The Third and Final Split of Quick Sort"}),t[29]||(t[29]=e("p",null," If you look closely, you'll notice that the numbers are already sorted from left to right. To put back the list together, join each subgroup together repeatedly in the following order: smaller subgroup - pivot - larger subgroup. ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/sample-result.svg",class:"max-w-md",caption:"The Final Pass of Selection Sort"}),t[30]||(t[30]=e("p",null," By repeatedly finding the smallest number from the unsorted portion of the list and moving them to the beginning, we have sucessfully sorted the list! ",-1)),m(E,{"alert-style":"note"},{default:k(()=>[e("p",null,[t[11]||(t[11]=r(" Like ")),t[12]||(t[12]=e("span",{class:"text-main"},"merge sort",-1)),t[13]||(t[13]=r(", quick sort has an ")),t[14]||(t[14]=e("span",{class:"text-main"},"average time complexity",-1)),t[15]||(t[15]=r(" of ")),t[16]||(t[16]=e("span",{class:"text-main"},"O(n log n)",-1)),t[17]||(t[17]=r(', making it a highly efficient algorithm. To learn more about the significance of a logarithmic time complexity, see the "Key Metrics" section in ')),e("span",{class:"cursor-pointer text-main",onClick:t[2]||(t[2]=y=>o.$router.push("/sorting-numbers/merge-sort"))},"merge sort"),t[18]||(t[18]=r(". "))])]),_:1}),t[31]||(t[31]=e("h2",{class:"mt-10 text-xl font-semibold"}," Creating a BST for Quick Sort ",-1)),t[32]||(t[32]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[33]||(t[33]=e("p",null,[r(" Quick sort can also lead to efficient searches for elements inside the list using a "),e("span",{class:"text-main"},"binary search tree (BST)"),r(". ")],-1)),t[34]||(t[34]=e("p",null," To create a BST for quick sort, create a BST for each group/subgroup of values in the list; the root of the BST will be the pivot, the left child will be the smaller subgroup, and the right child will be the greater subgroup. ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/creating-quicksort-bst.svg",class:"max-w-xl",caption:"Creating a Binary Search Tree (BST) with Quick Sort"}),t[35]||(t[35]=e("p",null," Then, simply put together all of the BST's to form a single BST. Each sub-BST's root is connected to its parent. ",-1)),m(g,{src:"/algorithms/sorting-numbers/quick-sort/quicksort-bst-final.svg",class:"max-w-md",caption:"The Final Binary Search Tree (BST)"})])]),[A(N).visualizer.id]:k(()=>[e("div",lt,[t[40]||(t[40]=e("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),t[41]||(t[41]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("form",{class:"space-y-4",ref_key:"form",ref:x},[e("div",nt,[e("div",it,[t[37]||(t[37]=e("label",{class:"font-medium"},"Ascending / Descending:",-1)),F(e("select",{class:"field","onUpdate:modelValue":t[3]||(t[3]=y=>h.value=y)},t[36]||(t[36]=[e("option",{value:"ascending"},"Ascending",-1),e("option",{value:"descending"},"Descending",-1)]),512),[[z,h.value]])]),e("button",{type:"button",class:"btn",disabled:a.length===8,onClick:l},"Add Row",8,at)]),e("table",null,[t[38]||(t[38]=e("thead",null,[e("tr",null,[e("th",null,"Numbers to Sort"),e("th")])],-1)),e("tbody",null,[(s(!0),n(b,null,f(a,(y,S)=>(s(),n("tr",null,[e("td",null,[F(e("input",{type:"number","onUpdate:modelValue":q=>a[S]=q,min:"1",max:V},null,8,ut),[[j,a[S]]])]),e("td",mt,[a.length>1?(s(),$(G,{key:0,onClick:q=>i(S)},null,8,["onClick"])):D("",!0)])]))),256))])]),e("button",{type:"submit",class:"btn",onClick:M(v,["prevent"])},"Run Algorithm")],512),t[42]||(t[42]=e("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),t[43]||(t[43]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),u.value?(s(),n("div",dt,[m(ot,{log:w.log},null,8,["log"])])):(s(),$(I,{key:1},{default:k(()=>[t[39]||(t[39]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:t[4]||(t[4]=M(()=>v(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[39]}))])]),_:2},1024))}};export{xt as default};
