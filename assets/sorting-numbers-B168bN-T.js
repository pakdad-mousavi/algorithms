const w=(d,g)=>{const n=[...d],t=[];let c;do{const l=[];c=!1;for(let i=0;i<n.length-1;i++){const e={pairStart:i,state:n.slice(),swapped:null},s=g?n[i]>n[i+1]:n[i]<n[i+1];s&&([n[i],n[i+1]]=[n[i+1],n[i]],c=!0),e.swapped=s,l.push(e)}l.push({pairStart:null,state:n.slice(),swapped:null}),t.push(l)}while(c);return t},x=(d,g)=>{const n=[],t=[...d];for(let c=0;c<d.length-1;c++){const l=t.slice(c),i=g?Math.min(...l):Math.max(...l),e=l.indexOf(i)+c,s={oldState:t.slice(),selection:i,selectionIdx:e};[t[c],t[e]]=[t[e],t[c]],s.newState=t.slice(),n.push(s)}return n},M=(d,g)=>{const n=[],t=[...d];for(let c=1;c<t.length;c++){const l=t[c],e=t.slice(0,c).findIndex(u=>g?u>l:u<l),s=t.slice();let r=null;e>-1&&(t.splice(e,0,null),t.splice(c+1,1),r=t.slice(),t[e]=l),n.push({pos:e,oldState:s,intermediateState:r,newState:t.slice(),currentNum:l})}return n},b=(d,g)=>{const n=[],t=[...d],c=Math.ceil(Math.log2(t.length)),l=(e,s)=>{const r=[];let u=0,o=0;for(;u<e.length&&o<s.length;)(g?e[u]<=s[o]:e[u]>=s[o])?(r.push(e[u]),u++):(r.push(s[o]),o++);return r.concat(e.slice(u)).concat(s.slice(o))},i=(e,s)=>{if(e.length<=1)return e;const r=c-s+1,u=Math.ceil(e.length/2),o=e.slice(0,u),a=e.slice(u),p=i(o,s+1),h=i(a,s+1);return n.push({splitDepth:s,left:o.slice(),right:a.slice(),mergeDepth:r,mergedLeft:p.slice(),mergedRight:h.slice()}),l(p,h)};return i(t,1),n},q=(d,g)=>{const n=[...d];let t=1;const c=({id:s,group:r})=>{const u=Math.ceil(r.length/2)-1,o=r[u],a=[],p=[];for(let S=0;S<r.length;S++){if(S===u)continue;const f=r[S];f<o?g?a.push(f):p.push(f):g?p.push(f):a.push(f)}const h=[];return a.length&&h.push({id:t++,group:a}),h.push({id:s,group:[o]}),p.length&&h.push({id:t++,group:p}),h},l=s=>s.map(({id:r,group:u})=>({id:r,group:[...u]})),e=(s=>{t=1;const r=[],u=t++;let o=c({id:u,group:s});r.push({before:{id:1,group:s},after:l(o),state:l(o)});const a=o.filter(p=>p.group.length>1).map(p=>p.id);for(;a.length;){const p=a.shift(),h=o.findIndex(m=>m.id===p);if(h===-1||o[h].group.length<=1)continue;const S=l(o)[h],f=c(o[h]);o.splice(h,1,...f);for(const m of f)m.id!==p&&m.group.length>1&&a.push(m.id);r.push({before:S,after:f,state:l(o)})}return r})(n);return console.log(e),e};export{w as b,M as i,b as m,q,x as s};
