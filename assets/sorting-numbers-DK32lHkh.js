const p=(i,r)=>{const e=[...i],t=[];let s;do{const o=[];s=!1;for(let n=0;n<e.length-1;n++){const l={pairStart:n,state:e.slice(),swapped:null},c=r?e[n]>e[n+1]:e[n]<e[n+1];c&&([e[n],e[n+1]]=[e[n+1],e[n]],s=!0),l.swapped=c,o.push(l)}o.push({pairStart:null,state:e.slice(),swapped:null}),t.push(o)}while(s);return t},d=(i,r)=>{const e=[],t=[...i];for(let s=0;s<i.length-1;s++){const o=t.slice(s),n=r?Math.min(...o):Math.max(...o),l=o.indexOf(n)+s,c={oldState:t.slice(),selection:n,selectionIdx:l};[t[s],t[l]]=[t[l],t[s]],c.newState=t.slice(),e.push(c)}return e},S=(i,r)=>{const e=[],t=[...i];for(let s=1;s<t.length;s++){const o=t[s],l=t.slice(0,s).findIndex(u=>r?u>o:u<o),c=t.slice();let a=null;l>-1&&(t.splice(l,0,null),t.splice(s+1,1),a=t.slice(),t[l]=o),e.push({pos:l,oldState:c,intermediateState:a,newState:t.slice(),currentNum:o})}return e};export{p as b,S as i,d as s};
