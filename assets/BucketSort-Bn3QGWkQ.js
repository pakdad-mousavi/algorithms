import{c as l,o as s,a as e,t as m,F as b,j as p,H as $,k as N,D as A,l as U,E as M,f as S,u as z,G as V,w as B,s as C,J as E,z as F,e as i,A as o,v as R,y as q}from"./index-BlRSe9Fv.js";import{_ as L,a as d,b as j}from"./EmptySpace-BAyMinpV.js";import{_ as I}from"./TrashButton-BRhWPkUr.js";import{a as D}from"./sorting-numbers-gNC4kWdj.js";import{_ as P}from"./Alert-IkDZ_r6i.js";const W={class:"mb-4 text-lg font-medium text-center"},J={class:"flex items-center justify-center h-40 p-2 border-2 border-dashed rounded-lg border-zinc-700"},O={class:"text-center"},G={class:"mb-2 text-lg font-medium"},H={class:"text-sm text-gray-600"},X={class:"p-4 space-y-2 border-2 border-dashed rounded-lg sm:p-2 border-zinc-700"},K={class:"mb-4 text-lg font-medium text-center"},Q={class:"p-2 text-sm text-center rounded-md bg-zinc-800"},Y={class:"p-4 space-y-2 border-2 border-dashed rounded-lg sm:p-2 border-zinc-700"},Z={class:"mb-4 text-lg font-medium text-center"},_={class:"p-2 text-sm text-center rounded-md bg-zinc-800"},tt={class:"flex flex-col mx-auto border rounded-lg sm:flex-row border-zinc-700 max-w-max"},et={class:"flex items-center justify-center border-b sm:border-b-0 sm:border-r size-14 last:border-0 border-zinc-700"},st={__name:"BucketSort",props:{k:{type:Number,required:!0},unsortedBuckets:{type:Array,required:!0},sortedBuckets:{type:Array,required:!0},sortedNums:{type:Array,required:!0}},setup(a){const g=a,u=h=>Math.round((h-1)/g.k*1*100)/100,k=h=>Math.round(h/g.k*1*100)/100-.01;return(h,r)=>(s(),l(b,null,[e("h3",W,"Create "+m(a.k)+" Empty Buckets:",1),e("div",{class:"grid gap-4 mb-14 max-sm:!grid-cols-1",style:$(`grid-template-columns: repeat(${a.k}, minmax(0, 1fr));`)},[(s(!0),l(b,null,p(a.k,n=>(s(),l("div",J,[e("div",O,[e("h3",G,"Bucket #"+m(n),1),e("h5",H," ("+m(u(n))+" - "+m(k(n))+") ",1)])]))),256))],4),r[0]||(r[0]=e("h3",{class:"mb-4 text-lg font-medium text-center"},"Fill Up Buckets With Values:",-1)),e("div",{class:"grid gap-4 mb-14 max-sm:!grid-cols-1",style:$(`grid-template-columns: repeat(${a.k}, minmax(0, 1fr));`)},[(s(!0),l(b,null,p(a.unsortedBuckets,(n,y)=>(s(),l("div",X,[e("h3",K,"Bucket #"+m(y+1),1),(s(!0),l(b,null,p(n,v=>(s(),l("div",Q,m(v),1))),256))]))),256))],4),r[1]||(r[1]=e("h3",{class:"mb-4 text-lg font-medium text-center"},"Sort Each Bucket Individually:",-1)),e("div",{class:"grid gap-4 mb-14 max-sm:!grid-cols-1",style:$(`grid-template-columns: repeat(${a.k}, minmax(0, 1fr));`)},[(s(!0),l(b,null,p(a.sortedBuckets,(n,y)=>(s(),l("div",Y,[e("h3",Z,"Bucket #"+m(y+1),1),(s(!0),l(b,null,p(n,v=>(s(),l("div",_,m(v),1))),256))]))),256))],4),r[2]||(r[2]=e("h3",{class:"mb-4 text-lg font-medium text-center"},"Join Sorted Buckets Together:",-1)),e("div",tt,[(s(!0),l(b,null,p(a.sortedNums,n=>(s(),l("div",et,m(n),1))),256))])],64))}},rt={class:"mb-10 space-y-4"},lt={class:"mb-10 space-y-4"},ot={class:"flex items-end gap-4"},nt={class:"flex flex-col flex-1 gap-2"},it=["disabled"],ut=["onUpdate:modelValue"],at={class:"w-20 mx-auto text-center"},dt={key:0},mt=.99,ht={__name:"BucketSort",setup(a){const g=N(null),u=A([.78,.17,.39,.26,.72,.94,.21,.12,.23,.68]),k=N("ascending"),h=U(()=>k.value==="ascending"),r=A({k:null,unsortedBuckets:null,sortedBuckets:null,sortedNums:null}),n=N(!1);M([u,k],()=>{n.value=!1});const y=()=>{const c=Math.round(Math.random()*100)/100;u.push(c)},v=c=>{u.splice(c,1)},T=()=>{if(!g.value.checkValidity())return g.value.reportValidity();const{k:t,unsortedBuckets:f,sortedBuckets:x,sortedNums:w}=D(u,h.value);r.k=t,r.unsortedBuckets=f,r.sortedBuckets=x,r.sortedNums=w,n.value=!0};return(c,t)=>(s(),S(j,null,{[z(V).howItWorks.id]:B(()=>[e("div",rt,[t[9]||(t[9]=e("p",null,[e("span",{class:"text-main"},"Bucket Sort"),o(" is a sorting algorithm used to sort relatively "),e("span",{class:"text-main"},"evenly distributed"),o(" numbers which are in a certain "),e("span",{class:"text-main"},"range"),o(", either from smallest to largest (ascending order), or from largest to smallest (descending order). ")],-1)),t[10]||(t[10]=e("p",null,[o(" This algorithm tries to simplify the sorting problem by splitting the large number of values that need to be sorted into smaller "),e("span",{class:"text-main"},"buckets"),o(" which can be sorted much faster. ")],-1)),e("p",null,[t[4]||(t[4]=o(" To learn more about how the sorting problem, see ")),e("span",{class:"cursor-pointer text-main",onClick:t[0]||(t[0]=f=>c.$router.push("/sorting-numbers/bubble-sort"))},"Bubble Sort"),t[5]||(t[5]=o(". "))]),t[11]||(t[11]=e("h2",{class:"mt-10 text-xl font-semibold"}," The Lottery Ticket Analogy ",-1)),t[12]||(t[12]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[13]||(t[13]=e("p",null," To best understand bucket sort, we will be sorting lottery ticket numbers. ",-1)),t[14]||(t[14]=e("p",null," Lottery tickets are usually numbered from 0 to a large number in the millions. This means that they are evenly distributed, and they are in a known range; bucket sort works best under these conditions. Lets assume we have 100 lottery tickets, numbered from 1 - 100: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/ticket-sample.svg",class:"max-w-lg",caption:"100 Lottery Tickets Numbered From 1 - 100"}),t[15]||(t[15]=e("p",null,[o(" This algorithm relies on splitting the numbers (or in our case, lottery ticket numbers) into different piles, or "),e("span",{class:"text-main"},"buckets"),o(". Usually, given that we have n items, we will need √n buckets. In our case, that would be √100 piles, which is exactly 10 different piles. ")],-1)),t[16]||(t[16]=e("p",null," Each pile will be given an equal range of numbers. In our case, that will be that will be 001 - 010 for the first pile, 011 - 020 for the second pile, and so on: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/empty-piles.svg",class:"max-w-2xl",caption:"A Series of Empty Piles"}),t[17]||(t[17]=e("p",null," Once we have our empty piles, we'll need to fill them up. We go through all of our jumbled lottery tickets and put them in the pile that they belong to: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/filled-piles.svg",class:"max-w-2xl",caption:"Filled Up Piles"}),t[18]||(t[18]=e("p",null," The piles now contain a very similar number of items; this is why it is important that the values to be sorted with bucket sort are evenly distributed. If they weren't one pile may have had 90 of the tickets, while the other would only have 10, which would greatly slow down bucket sort. ",-1)),e("p",null,[t[6]||(t[6]=o(" Now that we only have 10 items in each pile, we can sort the lottery ticket numbers in each one very quickly, using an algorithm like ")),e("span",{class:"text-main hover:cursor-pointer",onClick:t[1]||(t[1]=f=>c.$router.push("/sorting-numbers/insertion-sort"))},"insertion sort"),t[7]||(t[7]=o(": "))]),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/sorting-piles.svg",class:"max-w-2xl",caption:"Sorting the Filled Piles"}),t[19]||(t[19]=e("p",null," Once all of the piles are sorted, we can simply put each pile one after the other to create our final sorted list of lottery ticket numbers: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/joint-piles.svg",class:"max-w-md",caption:"Joining the Piles"}),t[20]||(t[20]=e("h2",{class:"mt-10 text-xl font-semibold"}," Bucket Sort With Example Numbers ",-1)),t[21]||(t[21]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[22]||(t[22]=e("p",null," Lets look at an actual example. Consider the following series of numbers: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/unsorted-numbers.svg",class:"max-w-lg",caption:"A Series of Unsorted Numbers"}),t[23]||(t[23]=e("p",null," The numbers span from 0 to 9, and are relatively evenly distributed; bucket sort is a viable option! ",-1)),t[24]||(t[24]=e("p",null," To continue, we'll make 3 empty buckets to sort our numbers in. All values from 0 - 2 will be go in the first bucket, values 3 - 5 will go in the second bucket, and finally, values 6 - 9 will go in the third and final bucket: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/empty-buckets.svg",class:"max-w-xl",caption:"Three Empty Buckets"}),t[25]||(t[25]=e("p",null," Now that we have our buckets, we'll have to fill them up with our values: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/filled-buckets.svg",class:"max-w-xl",caption:"Three Filled Buckets"}),t[26]||(t[26]=e("p",null,[o(" Next comes the sorting. Similarly to our lottery ticket number sorting, we will need to sort each bucket on its own, using an algorithm such as "),e("span",{class:"text-main"},"insertion sort"),o(": ")],-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/sorted-buckets.svg",class:"max-w-xl",caption:"Three Filled and Sorted Buckets"}),t[27]||(t[27]=e("p",null," Finally, we simply join the buckets back together in order, giving us our final sorted array of numbers: ",-1)),i(d,{src:"/algorithms/sorting-numbers/bucket-sort/sorted-numbers.svg",class:"max-w-lg",caption:"Sorted Numbers Using Bucket Sort"}),i(P,{"alert-style":"note"},{default:B(()=>t[8]||(t[8]=[e("div",{class:"space-y-4"},[e("p",null," Bucket sort has very specific requirements: the input values must lie within a known range and be reasonably evenly distributed. Because of this, it is most commonly demonstrated with floating-point numbers in the interval [0.0, 1.0). "),e("p",null," These constraints limit its usefulness in practice, so bucket sort is rarely applied outside of educational or highly specialized contexts. ")],-1)])),_:1,__:[8]})])]),[z(V).visualizer.id]:B(()=>[e("div",lt,[t[32]||(t[32]=e("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),t[33]||(t[33]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("form",{class:"space-y-4",ref_key:"form",ref:g},[e("div",ot,[e("div",nt,[t[29]||(t[29]=e("label",{class:"font-medium"},"Ascending / Descending:",-1)),C(e("select",{class:"field","onUpdate:modelValue":t[2]||(t[2]=f=>k.value=f)},t[28]||(t[28]=[e("option",{value:"ascending"},"Ascending",-1),e("option",{value:"descending"},"Descending",-1)]),512),[[E,k.value]])]),e("button",{type:"button",class:"btn",disabled:u.length===10,onClick:y},"Add Row",8,it)]),e("table",null,[t[30]||(t[30]=e("thead",null,[e("tr",null,[e("th",null,"Numbers to Sort"),e("th")])],-1)),e("tbody",null,[(s(!0),l(b,null,p(u,(f,x)=>(s(),l("tr",null,[e("td",null,[C(e("input",{type:"number","onUpdate:modelValue":w=>u[x]=w,min:"0",max:mt,step:"0.01"},null,8,ut),[[R,u[x]]])]),e("td",at,[u.length>1?(s(),S(I,{key:0,onClick:w=>v(x)},null,8,["onClick"])):q("",!0)])]))),256))])]),e("button",{type:"submit",class:"btn",onClick:F(T,["prevent"])},"Run Algorithm")],512),t[34]||(t[34]=e("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),t[35]||(t[35]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),n.value?(s(),l("div",dt,[i(st,{k:r.k,"unsorted-buckets":r.unsortedBuckets,"sorted-buckets":r.sortedBuckets,"sorted-nums":r.sortedNums},null,8,["k","unsorted-buckets","sorted-buckets","sorted-nums"]),o(" "+m(r.log),1)])):(s(),S(L,{key:1},{default:B(()=>[t[31]||(t[31]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:t[3]||(t[3]=F(()=>T(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[31]}))])]),_:2},1024))}};export{ht as default};
