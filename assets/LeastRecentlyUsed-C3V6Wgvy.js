import{A as v,k as c,B as V,f as p,u as b,D as x,w as d,a as t,s as R,v as k,c as U,j as $,F as C,z as L,e as o,E as s,o as r,y as T}from"./index-CpffD29e.js";import{_ as I,r as P}from"./virtual-memory-management-J5vE91JF.js";import{_ as B}from"./Alert-Cs1COD5I.js";import{_ as S,a as m,b as M,c as N}from"./TrashButton-D3GXsOfM.js";const D={class:"mb-10 space-y-4"},O={class:"mb-10 space-y-4"},q={class:"flex items-end gap-x-4"},W={class:"flex flex-col flex-1 gap-y-2"},z=["disabled"],E={class:"space-y-4 overflow-x-auto"},H=["onUpdate:modelValue"],j={class:"w-20 mx-auto text-center"},Y={__name:"LeastRecentlyUsed",setup(G){const u=v({log:null,totalPageFaults:null}),a=v([1,2,3,4,2,1,5,2,4,5,3,5]),i=c(3),g=c(null),h=c(!1);V([a,i],()=>{h.value=!1});const F=()=>{const n=Math.round(Math.random()*9+1);a.push(n)},A=n=>{a.splice(n,1)},y=async()=>{if(!g.value.checkValidity())return g.value.reportValidity();h.value=!0;const{log:e,totalPageFaults:l}=P(a.slice(),i.value,"lru");u.log=e,u.totalPageFaults=l};return(n,e)=>(r(),p(M,null,{[b(x).howItWorks.id]:d(()=>[t("div",D,[e[12]||(e[12]=t("p",null,[s(" The "),t("span",{class:"text-main"},"least recently used (LRU)"),s(" page replacement algorithm is used in virtual memory management. Its purpose is to choose a suitable "),t("span",{class:"text-main"},"victim page"),s(" (in this case, the algorithm would choose page that has been least recently used) and to swap with the requested page. ")],-1)),t("p",null,[e[5]||(e[5]=s(" To understand the concept behind ")),e[6]||(e[6]=t("span",{class:"text-main"},"virtual memory",-1)),e[7]||(e[7]=s(" and ")),e[8]||(e[8]=t("span",{class:"text-main"},"paging",-1)),e[9]||(e[9]=s(", see the ")),t("span",{onClick:e[0]||(e[0]=l=>n.$router.push("/virtual-memory-management/first-in-first-out")),class:"cursor-pointer text-main"},"first in first out (FIFO)"),e[10]||(e[10]=s(" page replacement algorithm, with a full guide to how virtual memory operates. "))]),e[13]||(e[13]=t("h2",{class:"mt-10 text-xl font-semibold"}," LRU Cache ",-1)),e[14]||(e[14]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[15]||(e[15]=t("p",null,[s(" To demonstrate how this algorithm works, it is important to know how an "),t("span",{class:"text-main"},"LRU cache"),s(" works. An LRU cache consists of a fixed number of slots to hold items (in this case, pages), with one side always containing the least recently used (LRU) item, and the other for the most recently used (MRU) one: ")],-1)),o(m,{src:"/algorithms/virtual-memory-management/lru/empty-lru-cache.svg",caption:"An empty LRU cache.",class:"max-w-sm"}),o(B,{alertStyle:"warning"},{default:d(()=>e[11]||(e[11]=[t("p",null," To demonstrate how this algorithm works, an LRU cache is used in this tutorial. However in real computer systems, the OS often estimates which page was least recently used rather than implementing an actual LRU cache to save space. ",-1)])),_:1,__:[11]}),e[16]||(e[16]=t("p",null," When an item, or page, is accessed it is added to the MRU slot: ",-1)),o(m,{src:"/algorithms/virtual-memory-management/lru/item-caching-primary.svg",caption:"Adding a page to an empty LRU cache.",class:"max-w-lg"}),e[17]||(e[17]=t("p",null," If there are already pages inside of the cache when a new page is accessed, all items are shifted to the right to make space for the new page: ",-1)),o(m,{src:"/algorithms/virtual-memory-management/lru/item-caching-secondary.svg",caption:"Shifting items to the right to make space for a new page.",class:"max-w-lg"}),e[18]||(e[18]=t("p",null," If the LRU cache is completely full, and a new page is accessed, the page in the LRU slot is first removed, then all items are shifted to the right like shown previously: ",-1)),o(m,{src:"/algorithms/virtual-memory-management/lru/shifting-out-lru-item.svg",caption:"Shifting a page out of the cache to make space for new ones.",class:"max-w-lg"}),e[19]||(e[19]=t("h2",{class:"mt-10 text-xl font-semibold"}," The LRU Page Replacement Algorithm ",-1)),e[20]||(e[20]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),e[21]||(e[21]=t("p",null," The LRU page replacement algorithm maintains an LRU cache to keep track of which pages were used most recently and least recently. ",-1)),e[22]||(e[22]=t("p",null,[s(" When a "),t("span",{class:"text-main"},"page fault"),s(" occurs and a "),t("span",{class:"text-main"},"victim page"),s(" needs to be chosen to make space for the newly requested page, the LRU page is taken out from the cache and is selected as the victim page. Then, the newly requested page is added to the cache's most recently used slot: ")],-1)),o(m,{src:"/algorithms/virtual-memory-management/lru/lru-algorithm.svg",caption:"How the LRU Algorithm Operates During Page Faults.",class:"max-w-lg"}),e[23]||(e[23]=t("p",null," This algorithm is considerably more efficient that the FIFO page replacement algorithm, resulting in lower page faults throughout the runtime of the system. ",-1))])]),[b(x).visualizer.id]:d(()=>[t("div",O,[e[27]||(e[27]=t("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),e[28]||(e[28]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),t("form",{class:"space-y-4",ref_key:"form",ref:g},[t("div",q,[t("div",W,[e[24]||(e[24]=t("label",{class:"font-medium"},"Number of Frames:",-1)),R(t("input",{type:"number",class:"w-full field sm:w-60",min:"1",max:"5","onUpdate:modelValue":e[1]||(e[1]=l=>i.value=l)},null,512),[[k,i.value]])]),t("button",{type:"button",class:"btn",onClick:e[2]||(e[2]=l=>F()),disabled:a.length===12},"Add Row",8,z)]),t("div",E,[t("table",null,[e[25]||(e[25]=t("thead",null,[t("tr",null,[t("th",null,"Page ID"),t("th")])],-1)),t("tbody",null,[(r(!0),U(C,null,$(a,(l,f)=>(r(),U("tr",null,[t("td",null,[R(t("input",{type:"number",min:"1",max:"10","onUpdate:modelValue":w=>a[f]=w},null,8,H),[[k,a[f]]])]),t("td",j,[a.length>1?(r(),p(N,{key:0,onClick:w=>A(f)},null,8,["onClick"])):T("",!0)])]))),256))])]),t("button",{type:"submit",class:"btn",onClick:e[3]||(e[3]=L(l=>y(),["prevent"]))},"Run Algorithm")])],512),e[29]||(e[29]=t("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),e[30]||(e[30]=t("hr",{class:"mb-4 border-neutral-800"},null,-1)),h.value?(r(),p(I,{key:0,"frame-count":i.value,log:u.log,"reference-str":a,"total-page-faults":u.totalPageFaults},null,8,["frame-count","log","reference-str","total-page-faults"])):(r(),p(S,{key:1},{default:d(()=>[e[26]||(e[26]=t("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),t("button",{onClick:e[4]||(e[4]=L(()=>y(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[26]}))])]),_:2},1024))}};export{Y as default};
