import{c as n,o,a as e,y as w,F as b,j as y,t as l,A as a,B as h,k as T,D as j,E as V,f as z,u as q,G as I,w as f,s as N,v as S,z as C,e as d}from"./index-Dtu6NS1_.js";import{_ as L,a as c,b as O}from"./EmptySpace-Dnpstv_X.js";import{_ as F}from"./TrashButton-DluxHDKH.js";import{b as R}from"./searching-algorithms-DowLSdrX.js";import{_ as A}from"./Alert-DVQcyZlP.js";const W={class:"flex mx-auto mb-20 overflow-hidden border rounded-md border-zinc-700 max-w-max"},D={class:"flex items-center justify-center w-12 text-sm border-r aspect-square last:border-r-0 border-zinc-700 sm:text-base"},U={key:0,class:"mb-4 text-lg font-medium text-center underline"},E={class:"space-y-28"},H={class:"flex justify-center mb-4 text-sm text-center gap-x-2"},G={class:"px-4 py-0.5 bg-zinc-800 rounded-md border-zinc-700 border"},J={class:"font-bold"},K={class:"px-4 py-0.5 bg-zinc-800 rounded-md border-zinc-700 border"},P={class:"font-bold"},Q={class:"px-4 py-0.5 bg-zinc-800 rounded-md border-zinc-700 border"},X={class:"font-bold"},Y={class:"mx-auto overflow-hidden rounded-md max-w-max text-zinc-600"},Z={class:"flex"},_={class:"w-12 text-center"},ee={key:0},te={key:1},se={class:"flex"},re={class:"flex items-center justify-center w-12 text-sm sm:text-base"},ie={class:"flex mx-auto overflow-hidden bg-transparent border rounded-md border-zinc-700 max-w-max"},ae={class:"mt-4 space-y-4"},oe={class:"flex flex-col items-center mx-auto gap-y-2 gap-x-10 sm:flex-row sm:max-w-xs"},ne={class:"flex items-center justify-center gap-x-4 sm:mr-auto"},le={class:"font-bold text-lg -translate-y-0.5"},de={key:0,class:"flex flex-col items-center mx-auto gap-y-2 gap-x-10 sm:flex-row sm:max-w-xs"},me={class:"flex items-center justify-center gap-x-4 sm:mr-auto"},ue={class:"font-bold text-lg -translate-y-0.5"},he={key:1,class:"flex flex-col items-center mx-auto gap-y-2 gap-x-10 sm:flex-row sm:max-w-xs"},ce={class:"flex items-center justify-center gap-x-4 sm:mr-auto"},ge={class:"font-bold text-lg -translate-y-0.5"},fe={class:"max-w-md p-2 mx-auto mt-20 text-center border rounded-md border-zinc-700"},be={key:0},xe={key:1},we={class:"font-medium"},ye={class:"px-4 py-0.5 bg-zinc-800 rounded-md border-zinc-700 border mt-2 max-w-max mx-auto text-sm"},pe={class:"font-bold"},ve={__name:"BinarySearch",props:{numbers:{type:Array,required:!0},sortedArr:{type:Array,required:!0},target:{type:Number,required:!0},log:{type:Array,required:!0},position:{type:Number,required:!0}},setup(s){return(k,i)=>(o(),n(b,null,[i[8]||(i[8]=e("h4",{class:"mb-4 text-lg font-medium text-center underline"},"Sorted Numbers",-1)),e("div",W,[(o(!0),n(b,null,y(s.sortedArr,r=>(o(),n("div",D,l(r),1))),256))]),s.log.length?(o(),n("h4",U,"Binary Search")):w("",!0),e("div",E,[(o(!0),n(b,null,y(s.log,(r,m)=>(o(),n("div",null,[e("div",H,[e("div",G,[i[0]||(i[0]=a(" Iteration: ")),e("span",J,l(m+1),1)]),e("div",K,[i[1]||(i[1]=a(" Low: ")),e("span",P,l(r.low),1)]),e("div",Q,[i[2]||(i[2]=a(" High: ")),e("span",X,l(r.high),1)])]),e("div",null,[e("div",Y,[e("div",Z,[(o(!0),n(b,null,y(s.sortedArr.length,(g,u)=>(o(),n("div",_,[u===r.low?(o(),n("div",ee," Low ")):w("",!0),u===r.high?(o(),n("div",te," High ")):w("",!0)]))),256))]),e("div",se,[(o(!0),n(b,null,y(s.sortedArr.length,(g,u)=>(o(),n("div",re,l(u),1))),256))])]),e("div",ie,[(o(!0),n(b,null,y(s.sortedArr,(g,u)=>(o(),n("div",{class:h([{"text-zinc-800":u>r.high||u<r.low,"bg-zinc-800":u===r.mid},"flex items-center justify-center w-12 text-sm border-r aspect-square last:border-r-0 border-zinc-700 sm:text-base"])},l(g),3))),256))])]),e("div",ae,[e("div",oe,[e("div",ne,[e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]===s.target?"border-emerald-600":"border-rose-700"])},l(s.target),3),e("span",le,l(s.sortedArr[r.mid]===s.target?"=":"≠"),1),e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]===s.target?"border-emerald-600":"border-rose-700"])},l(s.sortedArr[r.mid]),3)]),e("p",{class:h(s.sortedArr[r.mid]===s.target?"text-emerald-600":"text-rose-700")},l(s.sortedArr[r.mid]===s.target?"Found a Match":"Not a match"),3)]),s.sortedArr[r.mid]!==s.target?(o(),n("div",de,[e("div",me,[e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]<s.target?"border-emerald-600":"border-rose-700"])},l(s.target),3),e("span",ue,l(s.sortedArr[r.mid]<s.target?">":"≯"),1),e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]<s.target?"border-emerald-600":"border-rose-700"])},l(s.sortedArr[r.mid]),3)]),e("p",{class:h(s.sortedArr[r.mid]<s.target?"text-emerald-600":"text-rose-700")},l(s.sortedArr[r.mid]<s.target?`Update low to ${s.log[m+1].low}`:"Not a match"),3)])):w("",!0),s.sortedArr[r.mid]!==s.target&&s.sortedArr[r.mid]>s.target?(o(),n("div",he,[e("div",ce,[e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]>s.target?"border-emerald-600":"border-rose-700"])},l(s.target),3),e("span",ge,l(s.sortedArr[r.mid]>s.target?"<":"≮"),1),e("div",{class:h(["flex items-center justify-center w-10 text-sm border rounded-md sm:text-base sm:w-12 aspect-square",s.sortedArr[r.mid]>s.target?"border-emerald-600":"border-rose-700"])},l(s.sortedArr[r.mid]),3)]),e("p",{class:h(s.sortedArr[r.mid]>s.target?"text-emerald-600":"text-rose-700")},l(s.sortedArr[r.mid]>s.target?`Update high to ${s.log[m+1].high}`:"Not a match"),3)])):w("",!0)])]))),256)),e("div",fe,[s.position===-1?(o(),n("div",be,i[3]||(i[3]=[e("h4",{class:"mb-2 text-lg font-medium underline text-rose-500"},"No Match Found",-1),e("p",null,"The target number is not in the list of numbers above.",-1)]))):(o(),n("div",xe,[i[6]||(i[6]=e("h4",{class:"mb-2 text-lg font-medium underline text-emerald-500"},"Match Found",-1)),e("p",null,[i[4]||(i[4]=a(" The target number is in the list of numbers above at ")),e("span",we,"position "+l(s.position),1),i[5]||(i[5]=a(". "))])])),e("div",ye,[i[7]||(i[7]=a(" Total Iterations Needed: ")),e("span",pe,l(s.log.length),1)])])])],64))}},ke={class:"mb-10 space-y-4"},Ae={class:"mb-10 space-y-4"},Te={class:"flex items-end gap-4"},ze={class:"flex flex-col flex-1 gap-2"},Be=["disabled"],$e=["onUpdate:modelValue"],je={class:"w-20 mx-auto text-center"},qe={key:0},Ve={__name:"BinarySearch",setup(s){const k=T(null),i=j([14,5,83,3,59,76,84,34,54]),r=T(3),m=j({log:null,sortedArr:null,position:null}),g=T(!1);V([i,r],()=>{g.value=!1});const u=()=>{const x=Math.floor(Math.random()*100);i.push(x)},M=x=>{i.splice(x,1)},B=()=>{if(!k.value.checkValidity())return k.value.reportValidity();const{log:t,sortedArr:p,position:v}=R(i,r.value);m.log=t,m.sortedArr=p,m.position=v,g.value=!0};return(x,t)=>(o(),z(O,null,{[q(I).howItWorks.id]:f(()=>[e("div",ke,[e("p",null,[t[3]||(t[3]=e("span",{class:"text-main"},"Binary Search",-1)),t[4]||(t[4]=a(" is a searching technique for finding an item inside of a list of items. It is an extremely efficient algorithm and attempts to solve the ")),e("span",{class:"cursor-pointer text-main",onClick:t[0]||(t[0]=p=>x.$router.push("/searching-algorithms/linear-search"))},"searching problem"),t[5]||(t[5]=a(" in logarithmic time. "))]),t[10]||(t[10]=e("h2",{class:"mt-10 text-xl font-semibold"}," How Binary Search Works ",-1)),t[11]||(t[11]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[12]||(t[12]=e("p",null," Binary search works by dividing the list of elements being searched into half after each repetition, resulting in extremely fast search times, specially with larger datasets. ",-1)),t[13]||(t[13]=e("p",null," To put this into perspective, imagine you are given a dictionary and are tasked with finding a word in it. Would you start flipping through the dictionary page by page from page 1 and check each and every single item in each page until you find the word? ",-1)),t[14]||(t[14]=e("p",null," Of course not, that would take forever! Instead, you'd open the dictionary in the middle and see where you landed. If the word appears further down in the dictionary, then you would skip the pages before, and vice versa: you just split the number of pages to check in half! ",-1)),t[15]||(t[15]=e("h2",{class:"mt-10 text-xl font-semibold"}," An Example of Binary Search ",-1)),t[16]||(t[16]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[17]||(t[17]=e("p",null,' Lets pretend we have a simple dictionary with 7 words. We will be looking for the word "Tiger": ',-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/dictionary.svg",class:"max-w-md",caption:"An Example Dictionary"}),d(A,{"alert-style":"note"},{default:f(()=>t[6]||(t[6]=[e("div",{class:"space-y-4"},[e("p",null," Note that the words in a dictionary (as well as our dictionary) are sorted alphabetically. Binary search only works if the items in your list are sorted, so if they are not, they need to be sorted first. "),e("p",null," Only then can binary search be used on the list of items. ")],-1)])),_:1,__:[6]}),t[18]||(t[18]=e("p",null,[a(" Lets give each item on our dictionary an "),e("span",{class:"text-main"},"index"),a(". An index is the position of an item in a list; it points to the word at that position. ")],-1)),t[19]||(t[19]=e("p",null,[a(" The smallest index will be labeled as "),e("span",{class:"text-main"},"low"),a(". This will be the beginning of the range items we are going to search. Like so, the largest index will be labeled as "),e("span",{class:"text-main"},"high"),a("; this will be the end of the searchable range: ")],-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/labeled-dictionary.svg",class:"max-w-md",caption:"Labelling the Dictionary"}),t[20]||(t[20]=e("p",null," The first step of binary search to find the middle index from our range. This can be calculated as shown below: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/middle-formula.svg",class:"max-w-xs",caption:"Calculating the Middle Index"}),d(A,{"alert-style":"note"},{default:f(()=>t[7]||(t[7]=[e("div",{class:"space-y-4"},[e("p",null," If the list contains an even number of items, then the middle value with be between the two center elements; the resulting value of the middle calculation will not be an integer. "),e("p",null," To solve this simply round the value down by removing the decimal part to get the first element of the two center ones. ")],-1)])),_:1,__:[7]}),t[21]||(t[21]=e("p",null," After finding the middle index, we check to see if the word at that position is equal to the word we are searching for. If it is, then congratulations, you have found the word you were looking for! ",-1)),t[22]||(t[22]=e("p",null," If it isn't, then we need to check whether the word we're searching for comes before or after the word at the middle index. If the word comes before the middle index word, we need to change our high label to middle - 1. ",-1)),t[23]||(t[23]=e("p",null," On the other hand, if the word appears after the middle index word, then we need to change our low label to middle + 1. This is effectively how binary search can instantly cut the words we need to search for into half: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/binary-search-example-1.svg",class:"max-w-md",caption:"Using Binary Search on the Dictionary"}),t[24]||(t[24]=e("p",null," Just like that, we have cut the words we need to check in our dictionary in half! ",-1)),t[25]||(t[25]=e("p",null," This same process repeats with the new low and high indexes until either a match is found, or the list is down to 1 element and there is no match found (meaning the value is not in the list). ",-1)),t[26]||(t[26]=e("p",null," Lets repeat this process on our dictionary. First, lets calculate our new middle value: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/calculating-middle.svg",class:"max-w-xs",caption:"Calculating the Middle Index"}),t[27]||(t[27]=e("p",null," Using our new middle value, we can perform the next step of binary search. The following diagram illustrates the same repeated process for our dictionary: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/binary-search-example-2.svg",class:"max-w-md",caption:"Calculating the Middle Index"}),t[28]||(t[28]=e("p",null,' We have a match at position 6 for the word "Tiger"! ',-1)),t[29]||(t[29]=e("h2",{class:"mt-10 text-xl font-semibold"}," Key Metrics ",-1)),t[30]||(t[30]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),t[31]||(t[31]=e("p",null,[a(" Binary search is extremely efficient, with a "),e("span",{class:"text-main"},"time complexity"),a(" of "),e("span",{class:"text-main"},"O(log n)"),a(', where "n" is the number of element in the list. This means that in the worst case scenario, binary search will need to make log(n) operations. ')],-1)),d(A,{"alert-style":"note"},{default:f(()=>t[8]||(t[8]=[e("p",null,[a(" In reality, binary search will take "),e("span",{class:"text-main"},[a("O( log"),e("sub",null,"2"),a("(n) )")]),a(" time, however, in "),e("span",{class:"text-main"},"big O notation"),a(" all constants are removed from the final answer. This is because we only care about the trend of the growth rate, not the exact number of steps. That is why we say binary search has a time complexity of log(n). ")],-1)])),_:1,__:[8]}),t[32]||(t[32]=e("p",null," To illustrate how we can deduce the time complexity of binary search, consider the following diagram: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/binary-search-division.svg",class:"max-w-lg",caption:"The Division of 8 Items With Binary Search"}),t[33]||(t[33]=e("p",null," Look closely, do you see a pattern? After each step binary search takes, our list is cut in half. Therefore, we can reach the conclusion that: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/statistics.svg",class:"max-w-xs",caption:"The Trend in Binary Search"}),t[34]||(t[34]=e("p",null," In the worst case scenario, which is what big O is all about, binary search ends when the list is down to 1 element. Therefore: ",-1)),d(c,{src:"/algorithms/searching-algorithms/binary-search/time-complexity.svg",class:"max-w-50",caption:"The Time Complexity"}),t[35]||(t[35]=e("p",null," This is why binary search solves the searching problem in logarithmic time. ",-1)),d(A,{"alert-style":"note"},{default:f(()=>t[9]||(t[9]=[e("div",{class:"space-y-4"},[e("p",null," To understand how efficient binary search is, imagine you need to search a 10,000,000 item list (for the sake of brevity, we will assume each operation takes 1ms). "),e("p",null,[a(" With linear search, which has a time complexity of "),e("span",{class:"text-main"},"O(n)"),a(", it would take 10,000,000 ms to search the entire list, which is about 2 hours and 47 minutes. ")]),e("p",null,[a(" With binary search (assuming the list is sorted), which has a time complexity of "),e("span",{class:"text-main"},"O(log n)"),a(", (we will use a logarithm with a base of 2) it would take about 23 milliseconds to search the entire list! ")])],-1)])),_:1,__:[9]})])]),[q(I).visualizer.id]:f(()=>[e("div",Ae,[t[39]||(t[39]=e("h1",{class:"mb-4 text-xl font-semibold"}," Step By Step Illustration ",-1)),t[40]||(t[40]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),e("form",{class:"space-y-4",ref_key:"form",ref:k},[e("div",Te,[e("div",ze,[t[36]||(t[36]=e("label",{class:"font-medium"},"Target:",-1)),N(e("input",{type:"number",class:"w-full field","onUpdate:modelValue":t[1]||(t[1]=p=>r.value=p),min:"0",max:"100"},null,512),[[S,r.value]])]),e("button",{type:"button",class:"btn",disabled:i.length===9,onClick:u},"Add Row",8,Be)]),e("table",null,[t[37]||(t[37]=e("thead",null,[e("tr",null,[e("th",null,"Numbers"),e("th")])],-1)),e("tbody",null,[(o(!0),n(b,null,y(i,(p,v)=>(o(),n("tr",null,[e("td",null,[N(e("input",{type:"number","onUpdate:modelValue":$=>i[v]=$,min:"0",max:"100"},null,8,$e),[[S,i[v]]])]),e("td",je,[i.length>1?(o(),z(F,{key:0,onClick:$=>M(v)},null,8,["onClick"])):w("",!0)])]))),256))])]),e("button",{type:"submit",class:"btn",onClick:C(B,["prevent"])},"Run Algorithm")],512),t[41]||(t[41]=e("h2",{class:"mt-10 text-xl font-semibold"}," Results ",-1)),t[42]||(t[42]=e("hr",{class:"mb-4 border-neutral-800"},null,-1)),g.value?(o(),n("div",qe,[d(ve,{target:r.value,numbers:i,log:m.log,position:m.position,"sorted-arr":m.sortedArr},null,8,["target","numbers","log","position","sorted-arr"])])):(o(),z(L,{key:1},{default:f(()=>[t[38]||(t[38]=e("p",{class:"mb-4"}," No results to display yet, try running the algorithm... ",-1)),e("button",{onClick:t[2]||(t[2]=C(()=>B(),["prevent"])),class:"btn"}," Run Algorithm ")]),_:1,__:[38]}))])]),_:2},1024))}};export{Ve as default};
